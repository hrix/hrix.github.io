{"Asset":[{"_id":"themes/casper/source/css/normalize.css","path":"css/normalize.css","modified":true},{"_id":"themes/casper/source/css/screen.css","path":"css/screen.css","modified":true},{"_id":"themes/casper/source/fonts/icons.dev.svg","path":"fonts/icons.dev.svg","modified":true},{"_id":"themes/casper/source/fonts/icons.eot","path":"fonts/icons.eot","modified":true},{"_id":"themes/casper/source/fonts/icons.svg","path":"fonts/icons.svg","modified":true},{"_id":"themes/casper/source/fonts/icons.ttf","path":"fonts/icons.ttf","modified":true},{"_id":"themes/casper/source/fonts/icons.woff","path":"fonts/icons.woff","modified":true},{"_id":"themes/casper/source/js/index.js","path":"js/index.js","modified":true},{"_id":"themes/casper/source/js/jquery.fitvids.js","path":"js/jquery.fitvids.js","modified":true}],"Cache":[{"_id":"scaffolds/draft.md","mtime":1415841164000},{"_id":"scaffolds/page.md","mtime":1415841164000},{"_id":"scaffolds/photo.md","mtime":1415841164000},{"_id":"scaffolds/post.md","mtime":1415841164000},{"_id":"source/_posts/about-infrastructure-engineering.md","mtime":1415857153000},{"_id":"source/_posts/before-2008.md","mtime":1415857153000},{"_id":"themes/casper/LICENSE","mtime":1415841164000},{"_id":"themes/casper/README.md","mtime":1415841164000},{"_id":"themes/casper/_config.yml","mtime":1415848151000},{"_id":"themes/casper/source/css/normalize.css","mtime":1415841164000},{"_id":"themes/casper/source/css/screen.css","mtime":1415846598000},{"_id":"themes/casper/source/fonts/icons.dev.svg","mtime":1415841164000},{"_id":"themes/casper/source/fonts/icons.eot","mtime":1415841164000},{"_id":"themes/casper/source/fonts/icons.svg","mtime":1415841164000},{"_id":"themes/casper/source/fonts/icons.ttf","mtime":1415841164000},{"_id":"themes/casper/source/fonts/icons.woff","mtime":1415841164000},{"_id":"themes/casper/source/js/index.js","mtime":1415841164000},{"_id":"themes/casper/source/js/jquery.fitvids.js","mtime":1415841164000},{"_id":"themes/casper/layout/archive.ejs","mtime":1415841164000},{"_id":"themes/casper/layout/category.ejs","mtime":1415841164000},{"_id":"themes/casper/layout/index.ejs","mtime":1415841164000},{"_id":"themes/casper/layout/layout.ejs","mtime":1415841164000},{"_id":"themes/casper/layout/page.ejs","mtime":1415841164000},{"_id":"themes/casper/layout/post.ejs","mtime":1415841164000},{"_id":"themes/casper/layout/tag.ejs","mtime":1415841164000},{"_id":"themes/casper/layout/casper/after_all.ejs","mtime":1415841164000},{"_id":"themes/casper/layout/casper/footer.ejs","mtime":1415841164000},{"_id":"themes/casper/layout/casper/head.ejs","mtime":1415841164000},{"_id":"themes/casper/layout/casper/header.ejs","mtime":1415841164000},{"_id":"themes/casper/layout/casper/index.ejs","mtime":1415841164000},{"_id":"themes/casper/layout/casper/post.ejs","mtime":1415841164000},{"_id":"themes/casper/layout/casper/post/author.ejs","mtime":1415841164000},{"_id":"themes/casper/layout/casper/post/comments.ejs","mtime":1415845620000},{"_id":"themes/casper/layout/casper/post/meta.ejs","mtime":1415841164000},{"_id":"themes/casper/layout/casper/post/navigation.ejs","mtime":1415841164000},{"_id":"themes/casper/layout/casper/post/share.ejs","mtime":1415841164000}],"Category":[],"Page":[],"Post":[{"title":"before 2008","date":1415842899000,"tags":[],"content":"<h2 id=\"インターネット前\">インターネット前</h2>\n<ul>\n<li>1991年、音楽を作りたくてMacintosh購入。※初めての自分のパソコン</li>\n<li>1993年、ダイヤルQ2のシステム、ハードメンテ、オペレーション担当※PCのハードウエア学ぶ</li>\n<li>1995年、転職してVBのプログラム習得（２６歳、遅咲きですね）</li>\n<li>1998年、横浜の外資系CD通販のインターネットベンチャーからWeb業界に。いろいろ身に付いた。<h2 id=\"Web時代\">Web時代</h2>\n</li>\n<li>1999年　神保町のインターネット会社で働き始める。</li>\n<li>2000年　学校向けASP開発(IIS, VB, SQLServer)</li>\n<li>2001年　のべ40大学導入！（2～5百万/月が５年以上！　営業の人のおかげ）</li>\n<li>2005年　退社</li>\n<li>2006～2008年　辛酸<br>プログラムはあまり書かず（ネットワーク、サーバ管理、外注管理など）</li>\n<li>2008年　株式会社イー・エージェンシー入社。<br>いろいろ勉強し直し、インフラエンジニア的な仕事に落ち着く</li>\n</ul>\n","source":"_posts/before-2008.md","raw":"title: before 2008\ndate: 2014-11-13 01:41:39\ntags:\n---\n## インターネット前\n* 1991年、音楽を作りたくてMacintosh購入。※初めての自分のパソコン\n* 1993年、ダイヤルQ2のシステム、ハードメンテ、オペレーション担当※PCのハードウエア学ぶ\n* 1995年、転職してVBのプログラム習得（２６歳、遅咲きですね）\n* 1998年、横浜の外資系CD通販のインターネットベンチャーからWeb業界に。いろいろ身に付いた。\n## Web時代\n* 1999年　神保町のインターネット会社で働き始める。\n* 2000年　学校向けASP開発(IIS, VB, SQLServer)\n* 2001年　のべ40大学導入！（2～5百万/月が５年以上！　営業の人のおかげ）\n* 2005年　退社\n* 2006～2008年　辛酸\nプログラムはあまり書かず（ネットワーク、サーバ管理、外注管理など）\n* 2008年　株式会社イー・エージェンシー入社。\nいろいろ勉強し直し、インフラエンジニア的な仕事に落ち着く","slug":"before-2008","updated":1415857153000,"excerpt":"","_id":"3cm1dj2dmry4w8oh","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"最近のインフラエンジニアの仕事","date":1415807925000,"tags":[],"content":"<p>自社プロダクト部の平井です。部では二名いるインフラ担当の一人です</p>\n<p>インフラ担当って何をやっているのか？　少し分かりにくいのと、新しいことも取り入れながらやっていっていますので、仕事のご紹介したいと思います。</p>\n<h2 id=\"インフラエンジニアとは？\">インフラエンジニアとは？</h2>\n<p>仕事として分けると大きく二つ、</p>\n<ul>\n<li>サーバ構築</li>\n<li>日々の運用<br>があります。<br>前者は、インフラ設計、新しいサーバの立ち上げ、後者は、稼働中のサーバの監視、メンテナンス、トラブル対応、セキュリティ対策になります</li>\n</ul>\n<p>今までこれらを手を動かして作業している部分が大きかったのですが、少しづつプログラム開発のようなコード化を進めていっているのでそちらを紹介します。</p>\n<h2 id=\"インフラのコード化ついて\">インフラのコード化ついて</h2>\n<p>以前、もう一人のインフラ担当が以下のような事例紹介を発表しました。</p>\n<blockquote>\n<p>インフラ構築の自動化・量産化。e-Agencyのクラウドプロダクト部における Chef 導入事例を紹介<br><a href=\"http://www.e-agency.co.jp/column/20140724.html\" target=\"_blank\" rel=\"external\">http://www.e-agency.co.jp/column/20140724.html</a>  </p>\n</blockquote>\n<p>どれくらい大変なのか、その後どのように実践していったか、途中経過をお知らせします。</p>\n<h3 id=\"コード化の実践状況\">コード化の実践状況</h3>\n<p> 以前の手作業と、コード化作業との比較ですが、以下のような特徴があり、インフラチームのエンジニアと情報共有がグンと進んで来ているのを実感できています。</p>\n<ul>\n<li>一度作った手順（レシピ）をリポジトリ（Githubなど）に置いて再利用ができる</li>\n<li>どういう設定をしたか、いちいちサーバに入って確認しなくてよい（記憶に頼らなくてよい、メモの漏れも気にしなくて良い）といったメリットがあります。反面</li>\n<li>レシピを書かないといけないので、最初は手で立ち上げるよりかは時間がかかる。</li>\n</ul>\n<h3 id=\"サーバ構築\">サーバ構築</h3>\n<p>新規でサーバを立ち上げる場合は原則、Chefで構築したものを投入するようにしています。<br>具体的には主にミドルウエア（Apache, Nginx, MySQL, Ruby, PHPなど）のインストールを今まで手作業でやっていたものをChefに置き換えています。  </p>\n<h3 id=\"日々の運用\">日々の運用</h3>\n<p>監視部分はNagios, Muninといったツールをカスタマイズして使っています。これらの設定ファイルはGithubで履歴管理をしています。<br>不定期のメンテナンスでログインする場合、サーバ台数が100台以上になってきて、こちらも手作業が辛くなってきているので、ansibleというツールを使っています。こちらも手順がコード化できます。<br>ansibleはchefとかぶるツールではあるのですが、Chefと違って手作業でインストールしたサーバに対しても簡単に適用できるということで、全てのサーバに対してやる作業に使っています。</p>\n<p>Chefはきちんと整理して共有しやすくしてくれるツール。ansibleは運用を楽にしてくれるツールという使い分けになります。<br>しかし手でも同じことをやった経験があった方が、これらのツールになじみやすいと思います。</p>\n<h3 id=\"その他\">その他</h3>\n<ul>\n<li>SSL証明書の運用<br>暗号化と身元確認をまとめてやってしまっているもの。事務手続きもあるしちょっと特殊な扱いになります。</li>\n<li>その他<br>トラブル対応やセキュリティ対策、インフラのテストもこれから改善していきたい課題になります。</li>\n</ul>\n<h3 id=\"サーバ構築コード化の課題\">サーバ構築コード化の課題</h3>\n<p>　設計に関して、我々はサーバベンダーの選定はどこかに固定はしていません。固定するとコード化はしやすくなりますが、それよりもサーバの種類によってベンダーも使い分け（コーヒーで言うとブレンド）のメリットを感じています。運用中のアプリの造りも疎結合だったりします。</p>\n<ul>\n<li>オンプレミス（ラック借り）→最近はなくなりつつあります</li>\n<li>専用サーバ→クリティカルなもの、特殊な設定が必要なもの</li>\n<li>VPS→テスト、監視用サーバなどクリティカルではないもの（安く済ませられるというメリット）</li>\n<li>クラウド→これがメインになりつつあります</li>\n<li>その他Webサービス（AWSのS3など）<ul>\n<li>DNSのレコード管理のコード化はAWSのRoute53を使えば、比較的簡単にできるのでそろそろやりたいところです。</li>\n</ul>\n</li>\n</ul>\n<p>といった感じでサーバの役割に応じて使い分けています。<br>なので、サーバの起動、OSインストール、ネットワークの設定をどうしていくかは、これから考えていかなければいけない課題です。</p>\n<h3 id=\"まとめ\">まとめ</h3>\n<p>　インフラ業務をプログラムと同じように全てコード化できると、開発と運用がより近づき、今までよりレベルの上がった世界にいけると感じています。<br>インフラチームも開発と一緒になって生産性を上げて何かを成し遂げていきましょう。</p>\n","source":"_posts/about-infrastructure-engineering.md","raw":"title: 最近のインフラエンジニアの仕事\ndate: 2014-11-12 15:58:45\ntags:\n---\n\n自社プロダクト部の平井です。部では二名いるインフラ担当の一人です\n\nインフラ担当って何をやっているのか？　少し分かりにくいのと、新しいことも取り入れながらやっていっていますので、仕事のご紹介したいと思います。\n\n\n## インフラエンジニアとは？\n仕事として分けると大きく二つ、\n* サーバ構築\n* 日々の運用\nがあります。\n前者は、インフラ設計、新しいサーバの立ち上げ、後者は、稼働中のサーバの監視、メンテナンス、トラブル対応、セキュリティ対策になります\n\n今までこれらを手を動かして作業している部分が大きかったのですが、少しづつプログラム開発のようなコード化を進めていっているのでそちらを紹介します。\n\n## インフラのコード化ついて\n以前、もう一人のインフラ担当が以下のような事例紹介を発表しました。\n> インフラ構築の自動化・量産化。e-Agencyのクラウドプロダクト部における Chef 導入事例を紹介  \n> http://www.e-agency.co.jp/column/20140724.html  \n\nどれくらい大変なのか、その後どのように実践していったか、途中経過をお知らせします。\n\n### コード化の実践状況\n\n 以前の手作業と、コード化作業との比較ですが、以下のような特徴があり、インフラチームのエンジニアと情報共有がグンと進んで来ているのを実感できています。\n\n* 一度作った手順（レシピ）をリポジトリ（Githubなど）に置いて再利用ができる\n* どういう設定をしたか、いちいちサーバに入って確認しなくてよい（記憶に頼らなくてよい、メモの漏れも気にしなくて良い）といったメリットがあります。反面\n* レシピを書かないといけないので、最初は手で立ち上げるよりかは時間がかかる。\n\n### サーバ構築\n新規でサーバを立ち上げる場合は原則、Chefで構築したものを投入するようにしています。\n具体的には主にミドルウエア（Apache, Nginx, MySQL, Ruby, PHPなど）のインストールを今まで手作業でやっていたものをChefに置き換えています。  \n\n### 日々の運用\n監視部分はNagios, Muninといったツールをカスタマイズして使っています。これらの設定ファイルはGithubで履歴管理をしています。  \n不定期のメンテナンスでログインする場合、サーバ台数が100台以上になってきて、こちらも手作業が辛くなってきているので、ansibleというツールを使っています。こちらも手順がコード化できます。  \nansibleはchefとかぶるツールではあるのですが、Chefと違って手作業でインストールしたサーバに対しても簡単に適用できるということで、全てのサーバに対してやる作業に使っています。\n\nChefはきちんと整理して共有しやすくしてくれるツール。ansibleは運用を楽にしてくれるツールという使い分けになります。\nしかし手でも同じことをやった経験があった方が、これらのツールになじみやすいと思います。\n\n### その他\n* SSL証明書の運用\n暗号化と身元確認をまとめてやってしまっているもの。事務手続きもあるしちょっと特殊な扱いになります。\n* その他\nトラブル対応やセキュリティ対策、インフラのテストもこれから改善していきたい課題になります。\n\n### サーバ構築コード化の課題\n\n　設計に関して、我々はサーバベンダーの選定はどこかに固定はしていません。固定するとコード化はしやすくなりますが、それよりもサーバの種類によってベンダーも使い分け（コーヒーで言うとブレンド）のメリットを感じています。運用中のアプリの造りも疎結合だったりします。\n* オンプレミス（ラック借り）→最近はなくなりつつあります\n* 専用サーバ→クリティカルなもの、特殊な設定が必要なもの\n* VPS→テスト、監視用サーバなどクリティカルではないもの（安く済ませられるというメリット）\n* クラウド→これがメインになりつつあります\n* その他Webサービス（AWSのS3など）\n    * DNSのレコード管理のコード化はAWSのRoute53を使えば、比較的簡単にできるのでそろそろやりたいところです。\n\nといった感じでサーバの役割に応じて使い分けています。\nなので、サーバの起動、OSインストール、ネットワークの設定をどうしていくかは、これから考えていかなければいけない課題です。\n\n\n### まとめ\n　インフラ業務をプログラムと同じように全てコード化できると、開発と運用がより近づき、今までよりレベルの上がった世界にいけると感じています。\nインフラチームも開発と一緒になって生産性を上げて何かを成し遂げていきましょう。","slug":"about-infrastructure-engineering","updated":1415857153000,"excerpt":"","_id":"4xp40wuhbhzbowpz","categories":[],"comments":true,"layout":"post","photos":[],"link":""}],"Tag":[]}