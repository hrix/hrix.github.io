{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/casper/source/css/normalize.css","path":"css/normalize.css","modified":0,"renderable":1},{"_id":"themes/casper/source/css/screen.css","path":"css/screen.css","modified":0,"renderable":1},{"_id":"themes/casper/source/fonts/icons.dev.svg","path":"fonts/icons.dev.svg","modified":0,"renderable":1},{"_id":"themes/casper/source/fonts/icons.eot","path":"fonts/icons.eot","modified":0,"renderable":1},{"_id":"themes/casper/source/fonts/icons.svg","path":"fonts/icons.svg","modified":0,"renderable":1},{"_id":"themes/casper/source/fonts/icons.ttf","path":"fonts/icons.ttf","modified":0,"renderable":1},{"_id":"themes/casper/source/fonts/icons.woff","path":"fonts/icons.woff","modified":0,"renderable":1},{"_id":"themes/casper/source/js/index.js","path":"js/index.js","modified":0,"renderable":1},{"_id":"themes/casper/source/js/jquery.fitvids.js","path":"js/jquery.fitvids.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/casper/.gitignore","hash":"854da42f35444ed19a8164cb7c213f66ae0e178c","modified":1505459682229},{"_id":"themes/casper/LICENSE","hash":"7bc66e9632b475079619f585722930b551c3c081","modified":1505459682230},{"_id":"themes/casper/README.md","hash":"8a50fc48959d4fbe71643174cf4792a5db45bb0c","modified":1505459682230},{"_id":"themes/casper/_config.yml","hash":"ec5466b87e02aa4fcee9193c39b86f9fa77d238b","modified":1505460770765},{"_id":"source/_posts/SSLの脆弱性FREAK最低限の確認.md","hash":"cfa63aef9c7d32623acdf2ca224050399b6a079f","modified":1505456790529},{"_id":"source/_posts/about-infrastructure-engineering.md","hash":"fffbf2a016ad078303ad60cab943dc1793169227","modified":1505456790529},{"_id":"source/_posts/heartbeatなどでどのサーバにVIPがあるかチェックするnagiosプラグインを公開しました.md","hash":"295608a9f61af5daa61bb825b9ed26842429f42c","modified":1505456790529},{"_id":"source/_posts/history.md","hash":"9a90858e97f66950d070590ff80295ef551b0f31","modified":1505456790529},{"_id":"source/_posts/this-site-s-recipe.md","hash":"1d586ea2228fdbf265b554202291a091e1ab7317","modified":1505456790529},{"_id":"themes/casper/.git/COMMIT_EDITMSG","hash":"e7c104b94c403194cd7388c361eb6eb2a843175e","modified":1505461539347},{"_id":"themes/casper/.git/FETCH_HEAD","hash":"35d4dfd2ad1cded5e02b15e475f3349366bfcf48","modified":1505461555776},{"_id":"themes/casper/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1505459682227},{"_id":"themes/casper/.git/ORIG_HEAD","hash":"c0602283f7e42889536d77237074c2b9ceda2eae","modified":1505461556043},{"_id":"themes/casper/.git/config","hash":"902b3ea2277e3075d3585f3d4669cb6ee56af1dd","modified":1505459682229},{"_id":"themes/casper/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1505459679200},{"_id":"themes/casper/.git/index","hash":"27e7a0dd9bb5ed96897cc596f4997bc30908342d","modified":1505461517055},{"_id":"themes/casper/.git/packed-refs","hash":"a3c7a659eac7489765308b9ce282688b5a6dc53f","modified":1505459682223},{"_id":"themes/casper/layout/archive.ejs","hash":"eaf7e49f416afce6685e36a24a65a01bb3fe9ae7","modified":1505459682230},{"_id":"themes/casper/layout/category.ejs","hash":"eaf7e49f416afce6685e36a24a65a01bb3fe9ae7","modified":1505459682231},{"_id":"themes/casper/layout/index.ejs","hash":"eaf7e49f416afce6685e36a24a65a01bb3fe9ae7","modified":1505459682231},{"_id":"themes/casper/layout/layout.ejs","hash":"e3c9598002a8c8bd991aa7f0373ff984b643044a","modified":1505459682231},{"_id":"themes/casper/layout/page.ejs","hash":"13a176d843e7d44921e2705203011f0fcb46fcda","modified":1505459682232},{"_id":"themes/casper/layout/post.ejs","hash":"13a176d843e7d44921e2705203011f0fcb46fcda","modified":1505459682232},{"_id":"themes/casper/layout/tag.ejs","hash":"eaf7e49f416afce6685e36a24a65a01bb3fe9ae7","modified":1505459682232},{"_id":"themes/casper/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1505459679200},{"_id":"themes/casper/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1505459679200},{"_id":"themes/casper/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1505459679200},{"_id":"themes/casper/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1505459679200},{"_id":"themes/casper/.git/hooks/pre-commit.sample","hash":"e6c9fe47f7506171be08ed90baaf91d49bc7fe0c","modified":1505459679201},{"_id":"themes/casper/.git/hooks/pre-push.sample","hash":"503c3d2cd9066c2329ae84309c03a4c274f6d90e","modified":1505459679201},{"_id":"themes/casper/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1505459679201},{"_id":"themes/casper/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1505459679201},{"_id":"themes/casper/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1505459679201},{"_id":"themes/casper/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1505459679201},{"_id":"themes/casper/.git/logs/HEAD","hash":"42d431513c213b3e26d397c423ecac7e29b817ca","modified":1505461539349},{"_id":"themes/casper/layout/casper/after_all.ejs","hash":"e7cd492d5efe3186e22525d41176c5d5d6321e8c","modified":1505459682230},{"_id":"themes/casper/layout/casper/footer.ejs","hash":"1ebcfcb2305d34f1aba4501c0e2c7cd08049f8db","modified":1505459682230},{"_id":"themes/casper/layout/casper/head.ejs","hash":"e01e2d2d344ca73bead471bd9405e750956ad9ef","modified":1505461469102},{"_id":"themes/casper/layout/casper/head.ejsORG","hash":"88f7bcc882f2e5fae701af8940eaa7d476db0bb5","modified":1505461452078},{"_id":"themes/casper/layout/casper/header.ejs","hash":"f103e0d38c6412d1c5c47100ea7fbebcc2f990c5","modified":1505459682231},{"_id":"themes/casper/layout/casper/index.ejs","hash":"4dbc6044a87a0ccbad204e3c5719763d0bc4f440","modified":1505459682231},{"_id":"themes/casper/layout/casper/post.ejs","hash":"30c608f686a6ac462faa2964608c857b39e39fbf","modified":1505459682231},{"_id":"themes/casper/source/css/normalize.css","hash":"163c60d3a6c1f786754ba07426afbee0dfe82329","modified":1505459682232},{"_id":"themes/casper/source/css/screen.css","hash":"993c3ae25fbc216054f525c32df2eed3d57bd1a5","modified":1505459682232},{"_id":"themes/casper/source/fonts/icons.dev.svg","hash":"193cbbeadd27a72dadb809aa7344df5b9d965d8d","modified":1505459682233},{"_id":"themes/casper/source/fonts/icons.eot","hash":"d1abd4ac9fc6794570a73a5facaaf91492eed03c","modified":1505459682233},{"_id":"themes/casper/source/fonts/icons.svg","hash":"e8deb79bc630c3aa21ccdca71f6f6a43ca8035c1","modified":1505459682233},{"_id":"themes/casper/source/fonts/icons.ttf","hash":"e5247503ef56fd03361442ed082c8f9321e860b8","modified":1505459682233},{"_id":"themes/casper/source/fonts/icons.woff","hash":"31dc8eba4c3c2c799996658b01a5926267ae6af6","modified":1505459682234},{"_id":"themes/casper/source/js/index.js","hash":"a04c311b0818023c97446c79a8facdef067a04d1","modified":1505459682234},{"_id":"themes/casper/source/js/jquery.fitvids.js","hash":"0d9ee59f102516b1a988490f27ed37440713cc8b","modified":1505459682234},{"_id":"themes/casper/.git/objects/01/3f2126a28da58a5eb58792590755a5b3c46528","hash":"e1dc80b7ca724e2d6d6062af51636688ff667be2","modified":1505461517055},{"_id":"themes/casper/.git/objects/1e/bb37ca87990822df7eba72102c4498d44bb4e3","hash":"b5aa715a21a9add55752886b77c872082e71720c","modified":1505461539348},{"_id":"themes/casper/.git/objects/ca/3a167275beeb5caa1ac6e394e42d94a929ba89","hash":"a6b97848ad43c9603353c23163b8ef08b9ce753f","modified":1505461517053},{"_id":"themes/casper/.git/objects/cc/be87ae51f33064801f9a660030a597be3ac5d6","hash":"5e8adf0d1b2dfd4f6ddfaab68b457e2913e69fb1","modified":1505461539349},{"_id":"themes/casper/.git/objects/db/400458acfe346d0d5514b0542e820341dfd5d6","hash":"e4f60c629d6d7b1fb86e212b353d2cd39b53fba1","modified":1505461539348},{"_id":"themes/casper/.git/objects/f5/014b0e15df66eece41acf79a935fd1976f59f3","hash":"9f86fe40c5b9cee679432eaa39510a7dc5be2ba9","modified":1505461539349},{"_id":"themes/casper/.git/objects/pack/pack-3b4973098846f29ca89295c541497e97a2b04f68.idx","hash":"eb8eab4af57e789fb034aeef94b955c481e4b47d","modified":1505459681968},{"_id":"themes/casper/.git/refs/heads/master","hash":"c0602283f7e42889536d77237074c2b9ceda2eae","modified":1505461539349},{"_id":"themes/casper/layout/casper/post/author.ejs","hash":"d7eb9e85d3bd514cdc03100c4b91f088ad92b539","modified":1505459682231},{"_id":"themes/casper/layout/casper/post/comments.ejs","hash":"66024ffeb7dcd21b6679c29ab4e78fb876d1d807","modified":1505459682231},{"_id":"themes/casper/layout/casper/post/meta.ejs","hash":"c984cdc774bc884b33c8d87e3b59728cfdee773c","modified":1505459682231},{"_id":"themes/casper/layout/casper/post/navigation.ejs","hash":"2ed662189bbc0d305147fdc12b9f120e57722ac5","modified":1505459682231},{"_id":"themes/casper/layout/casper/post/share.ejs","hash":"1090719e3c49d4adadd7981eeff876b1c014d3e2","modified":1505459682231},{"_id":"themes/casper/.git/logs/refs/heads/master","hash":"42d431513c213b3e26d397c423ecac7e29b817ca","modified":1505461539349},{"_id":"themes/casper/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1505459682226},{"_id":"themes/casper/.git/logs/refs/remotes/origin/HEAD","hash":"1e08775e954de39115a44bef3f39cb744138649a","modified":1505459682227},{"_id":"themes/casper/.git/objects/pack/pack-3b4973098846f29ca89295c541497e97a2b04f68.pack","hash":"4a76e258e6a259b7cfd8e05e7be30014b026d0a0","modified":1505459681968},{"_id":"public/2015/04/13/this-site-s-recipe/index.html","hash":"9dcb78fe861fece8c4657df386187e598d95782f","modified":1505465415328},{"_id":"public/2015/04/13/history/index.html","hash":"e13e1cd335d4091de795b5dc6bb90664cfd14d22","modified":1505465415328},{"_id":"public/2015/04/12/about-infrastructure-engineering/index.html","hash":"330433dd2d22b01e33d3c15f56a11c052f455e93","modified":1505465415329},{"_id":"public/2015/03/05/SSLの脆弱性FREAK最低限の確認/index.html","hash":"af7f4ef9e48378ed9e9ea825b029d1ce79da7a3d","modified":1505465415329},{"_id":"public/2015/03/03/heartbeatなどでどのサーバにVIPがあるかチェックするnagiosプラグインを公開しました/index.html","hash":"28a15978f76cd3d8695156f025fc9559aebc0895","modified":1505465415329},{"_id":"public/archives/index.html","hash":"ad5c9cf5cd676637aac8688351fc6afc74b83ac6","modified":1505465415329},{"_id":"public/archives/2015/index.html","hash":"0d65b76baaec7d3bc0bda046e259294ea95bb373","modified":1505465415329},{"_id":"public/archives/2015/03/index.html","hash":"3b3f27d57e1466dba5faf78e39d0917ad68ccfde","modified":1505465415329},{"_id":"public/archives/2015/04/index.html","hash":"69eadf14e46b501674cdc2a86b62cb6b51a46ee9","modified":1505465415329},{"_id":"public/index.html","hash":"d12fa3796df4613c6295ce42b2cfc6b9908174da","modified":1505465415330},{"_id":"public/fonts/icons.dev.svg","hash":"193cbbeadd27a72dadb809aa7344df5b9d965d8d","modified":1505465415332},{"_id":"public/fonts/icons.eot","hash":"d1abd4ac9fc6794570a73a5facaaf91492eed03c","modified":1505465415332},{"_id":"public/fonts/icons.svg","hash":"e8deb79bc630c3aa21ccdca71f6f6a43ca8035c1","modified":1505465415332},{"_id":"public/fonts/icons.ttf","hash":"e5247503ef56fd03361442ed082c8f9321e860b8","modified":1505465415333},{"_id":"public/fonts/icons.woff","hash":"31dc8eba4c3c2c799996658b01a5926267ae6af6","modified":1505465415333},{"_id":"public/css/normalize.css","hash":"163c60d3a6c1f786754ba07426afbee0dfe82329","modified":1505465415336},{"_id":"public/js/index.js","hash":"a04c311b0818023c97446c79a8facdef067a04d1","modified":1505465415336},{"_id":"public/js/jquery.fitvids.js","hash":"0d9ee59f102516b1a988490f27ed37440713cc8b","modified":1505465415336},{"_id":"public/css/screen.css","hash":"993c3ae25fbc216054f525c32df2eed3d57bd1a5","modified":1505465415336}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"SSLの脆弱性FREAK最低限の確認","date":"2015-03-05T01:18:29.000Z","_content":"SSLの深刻な脆弱性「FREAK」というのが話題になっています。\n対策できていない場合、SSL通信が乗っ取られる危険があるので関係するWebサーバはチェックしておくとよいです。\n\nこれのチェック方法・対応ですが\nCentOS6/Apacheの組み合わせであれば、以下のような対策が考えられます。\n\n### ①適当なサーバから問題の暗号形式になっていないかチェック\n\n```\n$ openssl s_client -connect [対象のドメイン]:443 -cipher EXPORT\n```\n※結果\n> handshake failureとでて15行ぐらいで終わったら問題なし、\nそうではなく、たくさん暗号が出て\n> Server Temp Key: RSA, 512 bits\nなど出たら、問題ありです。\n※Apacheの場合ssl.conf（CentOS6）ではデフォルト\n> SSLCipherSuite ALL:!ADH:!EXPORT:!SSLv2:RC4+RSA:+HIGH:+MEDIUM:+LOW\nとなってあってこれが効いていれば問題なしですが、\n設定の仕方によって無効になってしまっている場合もあるので\nSSLCipherSuiteを有効になるよう調整するなど確認が必要です。\n\n\n### ②（CentOS6/7）2015/1/21にopensslのモジュールアップデートが出ているのでアップデートする\n\n```\n# yum update openssl\n```\n\n* ①が問題なければ②はそれほど急がなくてもよいかと。\n* 以下がまとまっていて分かりやすいかと思いました。\nhttp://d.hatena.ne.jp/Kango/20150304/1425448983\n","source":"_posts/SSLの脆弱性FREAK最低限の確認.md","raw":"title: SSLの脆弱性FREAK最低限の確認\ndate: 2015-03-05 10:18:29\ntags:\n---\nSSLの深刻な脆弱性「FREAK」というのが話題になっています。\n対策できていない場合、SSL通信が乗っ取られる危険があるので関係するWebサーバはチェックしておくとよいです。\n\nこれのチェック方法・対応ですが\nCentOS6/Apacheの組み合わせであれば、以下のような対策が考えられます。\n\n### ①適当なサーバから問題の暗号形式になっていないかチェック\n\n```\n$ openssl s_client -connect [対象のドメイン]:443 -cipher EXPORT\n```\n※結果\n> handshake failureとでて15行ぐらいで終わったら問題なし、\nそうではなく、たくさん暗号が出て\n> Server Temp Key: RSA, 512 bits\nなど出たら、問題ありです。\n※Apacheの場合ssl.conf（CentOS6）ではデフォルト\n> SSLCipherSuite ALL:!ADH:!EXPORT:!SSLv2:RC4+RSA:+HIGH:+MEDIUM:+LOW\nとなってあってこれが効いていれば問題なしですが、\n設定の仕方によって無効になってしまっている場合もあるので\nSSLCipherSuiteを有効になるよう調整するなど確認が必要です。\n\n\n### ②（CentOS6/7）2015/1/21にopensslのモジュールアップデートが出ているのでアップデートする\n\n```\n# yum update openssl\n```\n\n* ①が問題なければ②はそれほど急がなくてもよいかと。\n* 以下がまとまっていて分かりやすいかと思いました。\nhttp://d.hatena.ne.jp/Kango/20150304/1425448983\n","slug":"SSLの脆弱性FREAK最低限の確認","published":1,"updated":"2017-09-15T06:26:30.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ln8knl0000guz51dwf4dzd","content":"<p>SSLの深刻な脆弱性「FREAK」というのが話題になっています。<br>対策できていない場合、SSL通信が乗っ取られる危険があるので関係するWebサーバはチェックしておくとよいです。</p>\n<p>これのチェック方法・対応ですが<br>CentOS6/Apacheの組み合わせであれば、以下のような対策が考えられます。</p>\n<h3 id=\"①適当なサーバから問題の暗号形式になっていないかチェック\"><a href=\"#①適当なサーバから問題の暗号形式になっていないかチェック\" class=\"headerlink\" title=\"①適当なサーバから問題の暗号形式になっていないかチェック\"></a>①適当なサーバから問題の暗号形式になっていないかチェック</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ openssl s_client -connect [対象のドメイン]:443 -cipher EXPORT</div></pre></td></tr></table></figure>\n<p>※結果</p>\n<blockquote>\n<p>handshake failureとでて15行ぐらいで終わったら問題なし、<br>そうではなく、たくさん暗号が出て<br>Server Temp Key: RSA, 512 bits<br>など出たら、問題ありです。<br>※Apacheの場合ssl.conf（CentOS6）ではデフォルト<br>SSLCipherSuite ALL:!ADH:!EXPORT:!SSLv2:RC4+RSA:+HIGH:+MEDIUM:+LOW<br>となってあってこれが効いていれば問題なしですが、<br>設定の仕方によって無効になってしまっている場合もあるので<br>SSLCipherSuiteを有効になるよう調整するなど確認が必要です。</p>\n</blockquote>\n<h3 id=\"②（CentOS6-7）2015-1-21にopensslのモジュールアップデートが出ているのでアップデートする\"><a href=\"#②（CentOS6-7）2015-1-21にopensslのモジュールアップデートが出ているのでアップデートする\" class=\"headerlink\" title=\"②（CentOS6/7）2015/1/21にopensslのモジュールアップデートが出ているのでアップデートする\"></a>②（CentOS6/7）2015/1/21にopensslのモジュールアップデートが出ているのでアップデートする</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># yum update openssl</div></pre></td></tr></table></figure>\n<ul>\n<li>①が問題なければ②はそれほど急がなくてもよいかと。</li>\n<li>以下がまとまっていて分かりやすいかと思いました。<br><a href=\"http://d.hatena.ne.jp/Kango/20150304/1425448983\" target=\"_blank\" rel=\"external\">http://d.hatena.ne.jp/Kango/20150304/1425448983</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>SSLの深刻な脆弱性「FREAK」というのが話題になっています。<br>対策できていない場合、SSL通信が乗っ取られる危険があるので関係するWebサーバはチェックしておくとよいです。</p>\n<p>これのチェック方法・対応ですが<br>CentOS6/Apacheの組み合わせであれば、以下のような対策が考えられます。</p>\n<h3 id=\"①適当なサーバから問題の暗号形式になっていないかチェック\"><a href=\"#①適当なサーバから問題の暗号形式になっていないかチェック\" class=\"headerlink\" title=\"①適当なサーバから問題の暗号形式になっていないかチェック\"></a>①適当なサーバから問題の暗号形式になっていないかチェック</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ openssl s_client -connect [対象のドメイン]:443 -cipher EXPORT</div></pre></td></tr></table></figure>\n<p>※結果</p>\n<blockquote>\n<p>handshake failureとでて15行ぐらいで終わったら問題なし、<br>そうではなく、たくさん暗号が出て<br>Server Temp Key: RSA, 512 bits<br>など出たら、問題ありです。<br>※Apacheの場合ssl.conf（CentOS6）ではデフォルト<br>SSLCipherSuite ALL:!ADH:!EXPORT:!SSLv2:RC4+RSA:+HIGH:+MEDIUM:+LOW<br>となってあってこれが効いていれば問題なしですが、<br>設定の仕方によって無効になってしまっている場合もあるので<br>SSLCipherSuiteを有効になるよう調整するなど確認が必要です。</p>\n</blockquote>\n<h3 id=\"②（CentOS6-7）2015-1-21にopensslのモジュールアップデートが出ているのでアップデートする\"><a href=\"#②（CentOS6-7）2015-1-21にopensslのモジュールアップデートが出ているのでアップデートする\" class=\"headerlink\" title=\"②（CentOS6/7）2015/1/21にopensslのモジュールアップデートが出ているのでアップデートする\"></a>②（CentOS6/7）2015/1/21にopensslのモジュールアップデートが出ているのでアップデートする</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># yum update openssl</div></pre></td></tr></table></figure>\n<ul>\n<li>①が問題なければ②はそれほど急がなくてもよいかと。</li>\n<li>以下がまとまっていて分かりやすいかと思いました。<br><a href=\"http://d.hatena.ne.jp/Kango/20150304/1425448983\" target=\"_blank\" rel=\"external\">http://d.hatena.ne.jp/Kango/20150304/1425448983</a></li>\n</ul>\n"},{"title":"最近のインフラエンジニアの仕事","date":"2015-04-12T06:58:45.000Z","_content":"\n自社プロダクト部の平井です。部では二名いるインフラ担当の一人です\n\nインフラ担当って何をやっているのか？　少し分かりにくいのと、新しいことも取り入れながらやっていっていますので、仕事のご紹介したいと思います。\n\n\n## インフラエンジニアとは？\n仕事として分けると大きく二つ、\n* サーバ構築\n* 日々の運用\nがあります。\n前者は、インフラ設計、新しいサーバの立ち上げ、後者は、稼働中のサーバの監視、メンテナンス、トラブル対応、セキュリティ対策になります\n\n今までこれらを手を動かして作業している部分が大きかったのですが、少しづつプログラム開発のようなコード化を進めていっているのでそちらを紹介します。\n\n## インフラのコード化ついて\n以前、もう一人のインフラ担当が以下のような事例紹介を発表しました。\n> インフラ構築の自動化・量産化。e-Agencyのクラウドプロダクト部における Chef 導入事例を紹介  \n> http://www.e-agency.co.jp/column/20140724.html  \n\nどれくらい大変なのか、その後どのように実践していったか、途中経過をお知らせします。\n\n### コード化の実践状況\n\n 以前の手作業と、コード化作業との比較ですが、以下のような特徴があり、インフラチームのエンジニアと情報共有がグンと進んで来ているのを実感できています。\n\n* 一度作った手順（レシピ）をリポジトリ（Githubなど）に置いて再利用ができる\n* どういう設定をしたか、いちいちサーバに入って確認しなくてよい（記憶に頼らなくてよい、メモの漏れも気にしなくて良い）といったメリットがあります。反面\n* レシピを書かないといけないので、最初は手で立ち上げるよりかは時間がかかる。\n\n### サーバ構築\n新規でサーバを立ち上げる場合は原則、Chefで構築したものを投入するようにしています。\n具体的には主にミドルウエア（Apache, Nginx, MySQL, Ruby, PHPなど）のインストールを今まで手作業でやっていたものをChefに置き換えています。  \n\n### 日々の運用\n監視部分はNagios, Muninといったツールをカスタマイズして使っています。これらの設定ファイルはGithubで履歴管理をしています。  \n不定期のメンテナンスでログインする場合、サーバ台数が100台以上になってきて、こちらも手作業が辛くなってきているので、ansibleというツールを使っています。こちらも手順がコード化できます。  \nansibleはchefとかぶるツールではあるのですが、Chefと違って手作業でインストールしたサーバに対しても簡単に適用できるということで、全てのサーバに対してやる作業に使っています。\n\nChefはきちんと整理して共有しやすくしてくれるツール。ansibleは運用を楽にしてくれるツールという使い分けになります。\nしかし手でも同じことをやった経験があった方が、これらのツールになじみやすいと思います。\n\n### その他\n* SSL証明書の運用\n暗号化と身元確認をまとめてやってしまっているもの。事務手続きもあるしちょっと特殊な扱いになります。\n* その他\nトラブル対応やセキュリティ対策、インフラのテストもこれから改善していきたい課題になります。\n\n### サーバ構築コード化の課題\n\n　設計に関して、我々はサーバベンダーの選定はどこかに固定はしていません。固定するとコード化はしやすくなりますが、それよりもサーバの種類によってベンダーも使い分け（コーヒーで言うとブレンド）のメリットを感じています。運用中のアプリの造りも疎結合だったりします。\n* オンプレミス（ラック借り）→最近はなくなりつつあります\n* 専用サーバ→クリティカルなもの、特殊な設定が必要なもの\n* VPS→テスト、監視用サーバなどクリティカルではないもの（安く済ませられるというメリット）\n* クラウド→これがメインになりつつあります\n* その他Webサービス（AWSのS3など）\n    * DNSのレコード管理のコード化はAWSのRoute53を使えば、比較的簡単にできるのでそろそろやりたいところです。\n\nといった感じでサーバの役割に応じて使い分けています。\nなので、サーバの起動、OSインストール、ネットワークの設定をどうしていくかは、これから考えていかなければいけない課題です。\n\n\n### まとめ\n　インフラ業務をプログラムと同じように全てコード化できると、開発と運用がより近づき、今までよりレベルの上がった世界にいけると感じています。\nインフラチームも開発と一緒になって生産性を上げて何かを成し遂げていきましょう。\n","source":"_posts/about-infrastructure-engineering.md","raw":"title: 最近のインフラエンジニアの仕事\ndate: 2015-04-12 15:58:45\ntags:\n---\n\n自社プロダクト部の平井です。部では二名いるインフラ担当の一人です\n\nインフラ担当って何をやっているのか？　少し分かりにくいのと、新しいことも取り入れながらやっていっていますので、仕事のご紹介したいと思います。\n\n\n## インフラエンジニアとは？\n仕事として分けると大きく二つ、\n* サーバ構築\n* 日々の運用\nがあります。\n前者は、インフラ設計、新しいサーバの立ち上げ、後者は、稼働中のサーバの監視、メンテナンス、トラブル対応、セキュリティ対策になります\n\n今までこれらを手を動かして作業している部分が大きかったのですが、少しづつプログラム開発のようなコード化を進めていっているのでそちらを紹介します。\n\n## インフラのコード化ついて\n以前、もう一人のインフラ担当が以下のような事例紹介を発表しました。\n> インフラ構築の自動化・量産化。e-Agencyのクラウドプロダクト部における Chef 導入事例を紹介  \n> http://www.e-agency.co.jp/column/20140724.html  \n\nどれくらい大変なのか、その後どのように実践していったか、途中経過をお知らせします。\n\n### コード化の実践状況\n\n 以前の手作業と、コード化作業との比較ですが、以下のような特徴があり、インフラチームのエンジニアと情報共有がグンと進んで来ているのを実感できています。\n\n* 一度作った手順（レシピ）をリポジトリ（Githubなど）に置いて再利用ができる\n* どういう設定をしたか、いちいちサーバに入って確認しなくてよい（記憶に頼らなくてよい、メモの漏れも気にしなくて良い）といったメリットがあります。反面\n* レシピを書かないといけないので、最初は手で立ち上げるよりかは時間がかかる。\n\n### サーバ構築\n新規でサーバを立ち上げる場合は原則、Chefで構築したものを投入するようにしています。\n具体的には主にミドルウエア（Apache, Nginx, MySQL, Ruby, PHPなど）のインストールを今まで手作業でやっていたものをChefに置き換えています。  \n\n### 日々の運用\n監視部分はNagios, Muninといったツールをカスタマイズして使っています。これらの設定ファイルはGithubで履歴管理をしています。  \n不定期のメンテナンスでログインする場合、サーバ台数が100台以上になってきて、こちらも手作業が辛くなってきているので、ansibleというツールを使っています。こちらも手順がコード化できます。  \nansibleはchefとかぶるツールではあるのですが、Chefと違って手作業でインストールしたサーバに対しても簡単に適用できるということで、全てのサーバに対してやる作業に使っています。\n\nChefはきちんと整理して共有しやすくしてくれるツール。ansibleは運用を楽にしてくれるツールという使い分けになります。\nしかし手でも同じことをやった経験があった方が、これらのツールになじみやすいと思います。\n\n### その他\n* SSL証明書の運用\n暗号化と身元確認をまとめてやってしまっているもの。事務手続きもあるしちょっと特殊な扱いになります。\n* その他\nトラブル対応やセキュリティ対策、インフラのテストもこれから改善していきたい課題になります。\n\n### サーバ構築コード化の課題\n\n　設計に関して、我々はサーバベンダーの選定はどこかに固定はしていません。固定するとコード化はしやすくなりますが、それよりもサーバの種類によってベンダーも使い分け（コーヒーで言うとブレンド）のメリットを感じています。運用中のアプリの造りも疎結合だったりします。\n* オンプレミス（ラック借り）→最近はなくなりつつあります\n* 専用サーバ→クリティカルなもの、特殊な設定が必要なもの\n* VPS→テスト、監視用サーバなどクリティカルではないもの（安く済ませられるというメリット）\n* クラウド→これがメインになりつつあります\n* その他Webサービス（AWSのS3など）\n    * DNSのレコード管理のコード化はAWSのRoute53を使えば、比較的簡単にできるのでそろそろやりたいところです。\n\nといった感じでサーバの役割に応じて使い分けています。\nなので、サーバの起動、OSインストール、ネットワークの設定をどうしていくかは、これから考えていかなければいけない課題です。\n\n\n### まとめ\n　インフラ業務をプログラムと同じように全てコード化できると、開発と運用がより近づき、今までよりレベルの上がった世界にいけると感じています。\nインフラチームも開発と一緒になって生産性を上げて何かを成し遂げていきましょう。\n","slug":"about-infrastructure-engineering","published":1,"updated":"2017-09-15T06:26:30.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ln8knq0001guz5ezgv80mi","content":"<p>自社プロダクト部の平井です。部では二名いるインフラ担当の一人です</p>\n<p>インフラ担当って何をやっているのか？　少し分かりにくいのと、新しいことも取り入れながらやっていっていますので、仕事のご紹介したいと思います。</p>\n<h2 id=\"インフラエンジニアとは？\"><a href=\"#インフラエンジニアとは？\" class=\"headerlink\" title=\"インフラエンジニアとは？\"></a>インフラエンジニアとは？</h2><p>仕事として分けると大きく二つ、</p>\n<ul>\n<li>サーバ構築</li>\n<li>日々の運用<br>があります。<br>前者は、インフラ設計、新しいサーバの立ち上げ、後者は、稼働中のサーバの監視、メンテナンス、トラブル対応、セキュリティ対策になります</li>\n</ul>\n<p>今までこれらを手を動かして作業している部分が大きかったのですが、少しづつプログラム開発のようなコード化を進めていっているのでそちらを紹介します。</p>\n<h2 id=\"インフラのコード化ついて\"><a href=\"#インフラのコード化ついて\" class=\"headerlink\" title=\"インフラのコード化ついて\"></a>インフラのコード化ついて</h2><p>以前、もう一人のインフラ担当が以下のような事例紹介を発表しました。</p>\n<blockquote>\n<p>インフラ構築の自動化・量産化。e-Agencyのクラウドプロダクト部における Chef 導入事例を紹介<br><a href=\"http://www.e-agency.co.jp/column/20140724.html\" target=\"_blank\" rel=\"external\">http://www.e-agency.co.jp/column/20140724.html</a>  </p>\n</blockquote>\n<p>どれくらい大変なのか、その後どのように実践していったか、途中経過をお知らせします。</p>\n<h3 id=\"コード化の実践状況\"><a href=\"#コード化の実践状況\" class=\"headerlink\" title=\"コード化の実践状況\"></a>コード化の実践状況</h3><p> 以前の手作業と、コード化作業との比較ですが、以下のような特徴があり、インフラチームのエンジニアと情報共有がグンと進んで来ているのを実感できています。</p>\n<ul>\n<li>一度作った手順（レシピ）をリポジトリ（Githubなど）に置いて再利用ができる</li>\n<li>どういう設定をしたか、いちいちサーバに入って確認しなくてよい（記憶に頼らなくてよい、メモの漏れも気にしなくて良い）といったメリットがあります。反面</li>\n<li>レシピを書かないといけないので、最初は手で立ち上げるよりかは時間がかかる。</li>\n</ul>\n<h3 id=\"サーバ構築\"><a href=\"#サーバ構築\" class=\"headerlink\" title=\"サーバ構築\"></a>サーバ構築</h3><p>新規でサーバを立ち上げる場合は原則、Chefで構築したものを投入するようにしています。<br>具体的には主にミドルウエア（Apache, Nginx, MySQL, Ruby, PHPなど）のインストールを今まで手作業でやっていたものをChefに置き換えています。  </p>\n<h3 id=\"日々の運用\"><a href=\"#日々の運用\" class=\"headerlink\" title=\"日々の運用\"></a>日々の運用</h3><p>監視部分はNagios, Muninといったツールをカスタマイズして使っています。これらの設定ファイルはGithubで履歴管理をしています。<br>不定期のメンテナンスでログインする場合、サーバ台数が100台以上になってきて、こちらも手作業が辛くなってきているので、ansibleというツールを使っています。こちらも手順がコード化できます。<br>ansibleはchefとかぶるツールではあるのですが、Chefと違って手作業でインストールしたサーバに対しても簡単に適用できるということで、全てのサーバに対してやる作業に使っています。</p>\n<p>Chefはきちんと整理して共有しやすくしてくれるツール。ansibleは運用を楽にしてくれるツールという使い分けになります。<br>しかし手でも同じことをやった経験があった方が、これらのツールになじみやすいと思います。</p>\n<h3 id=\"その他\"><a href=\"#その他\" class=\"headerlink\" title=\"その他\"></a>その他</h3><ul>\n<li>SSL証明書の運用<br>暗号化と身元確認をまとめてやってしまっているもの。事務手続きもあるしちょっと特殊な扱いになります。</li>\n<li>その他<br>トラブル対応やセキュリティ対策、インフラのテストもこれから改善していきたい課題になります。</li>\n</ul>\n<h3 id=\"サーバ構築コード化の課題\"><a href=\"#サーバ構築コード化の課題\" class=\"headerlink\" title=\"サーバ構築コード化の課題\"></a>サーバ構築コード化の課題</h3><p>　設計に関して、我々はサーバベンダーの選定はどこかに固定はしていません。固定するとコード化はしやすくなりますが、それよりもサーバの種類によってベンダーも使い分け（コーヒーで言うとブレンド）のメリットを感じています。運用中のアプリの造りも疎結合だったりします。</p>\n<ul>\n<li>オンプレミス（ラック借り）→最近はなくなりつつあります</li>\n<li>専用サーバ→クリティカルなもの、特殊な設定が必要なもの</li>\n<li>VPS→テスト、監視用サーバなどクリティカルではないもの（安く済ませられるというメリット）</li>\n<li>クラウド→これがメインになりつつあります</li>\n<li>その他Webサービス（AWSのS3など）<ul>\n<li>DNSのレコード管理のコード化はAWSのRoute53を使えば、比較的簡単にできるのでそろそろやりたいところです。</li>\n</ul>\n</li>\n</ul>\n<p>といった感じでサーバの役割に応じて使い分けています。<br>なので、サーバの起動、OSインストール、ネットワークの設定をどうしていくかは、これから考えていかなければいけない課題です。</p>\n<h3 id=\"まとめ\"><a href=\"#まとめ\" class=\"headerlink\" title=\"まとめ\"></a>まとめ</h3><p>　インフラ業務をプログラムと同じように全てコード化できると、開発と運用がより近づき、今までよりレベルの上がった世界にいけると感じています。<br>インフラチームも開発と一緒になって生産性を上げて何かを成し遂げていきましょう。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>自社プロダクト部の平井です。部では二名いるインフラ担当の一人です</p>\n<p>インフラ担当って何をやっているのか？　少し分かりにくいのと、新しいことも取り入れながらやっていっていますので、仕事のご紹介したいと思います。</p>\n<h2 id=\"インフラエンジニアとは？\"><a href=\"#インフラエンジニアとは？\" class=\"headerlink\" title=\"インフラエンジニアとは？\"></a>インフラエンジニアとは？</h2><p>仕事として分けると大きく二つ、</p>\n<ul>\n<li>サーバ構築</li>\n<li>日々の運用<br>があります。<br>前者は、インフラ設計、新しいサーバの立ち上げ、後者は、稼働中のサーバの監視、メンテナンス、トラブル対応、セキュリティ対策になります</li>\n</ul>\n<p>今までこれらを手を動かして作業している部分が大きかったのですが、少しづつプログラム開発のようなコード化を進めていっているのでそちらを紹介します。</p>\n<h2 id=\"インフラのコード化ついて\"><a href=\"#インフラのコード化ついて\" class=\"headerlink\" title=\"インフラのコード化ついて\"></a>インフラのコード化ついて</h2><p>以前、もう一人のインフラ担当が以下のような事例紹介を発表しました。</p>\n<blockquote>\n<p>インフラ構築の自動化・量産化。e-Agencyのクラウドプロダクト部における Chef 導入事例を紹介<br><a href=\"http://www.e-agency.co.jp/column/20140724.html\" target=\"_blank\" rel=\"external\">http://www.e-agency.co.jp/column/20140724.html</a>  </p>\n</blockquote>\n<p>どれくらい大変なのか、その後どのように実践していったか、途中経過をお知らせします。</p>\n<h3 id=\"コード化の実践状況\"><a href=\"#コード化の実践状況\" class=\"headerlink\" title=\"コード化の実践状況\"></a>コード化の実践状況</h3><p> 以前の手作業と、コード化作業との比較ですが、以下のような特徴があり、インフラチームのエンジニアと情報共有がグンと進んで来ているのを実感できています。</p>\n<ul>\n<li>一度作った手順（レシピ）をリポジトリ（Githubなど）に置いて再利用ができる</li>\n<li>どういう設定をしたか、いちいちサーバに入って確認しなくてよい（記憶に頼らなくてよい、メモの漏れも気にしなくて良い）といったメリットがあります。反面</li>\n<li>レシピを書かないといけないので、最初は手で立ち上げるよりかは時間がかかる。</li>\n</ul>\n<h3 id=\"サーバ構築\"><a href=\"#サーバ構築\" class=\"headerlink\" title=\"サーバ構築\"></a>サーバ構築</h3><p>新規でサーバを立ち上げる場合は原則、Chefで構築したものを投入するようにしています。<br>具体的には主にミドルウエア（Apache, Nginx, MySQL, Ruby, PHPなど）のインストールを今まで手作業でやっていたものをChefに置き換えています。  </p>\n<h3 id=\"日々の運用\"><a href=\"#日々の運用\" class=\"headerlink\" title=\"日々の運用\"></a>日々の運用</h3><p>監視部分はNagios, Muninといったツールをカスタマイズして使っています。これらの設定ファイルはGithubで履歴管理をしています。<br>不定期のメンテナンスでログインする場合、サーバ台数が100台以上になってきて、こちらも手作業が辛くなってきているので、ansibleというツールを使っています。こちらも手順がコード化できます。<br>ansibleはchefとかぶるツールではあるのですが、Chefと違って手作業でインストールしたサーバに対しても簡単に適用できるということで、全てのサーバに対してやる作業に使っています。</p>\n<p>Chefはきちんと整理して共有しやすくしてくれるツール。ansibleは運用を楽にしてくれるツールという使い分けになります。<br>しかし手でも同じことをやった経験があった方が、これらのツールになじみやすいと思います。</p>\n<h3 id=\"その他\"><a href=\"#その他\" class=\"headerlink\" title=\"その他\"></a>その他</h3><ul>\n<li>SSL証明書の運用<br>暗号化と身元確認をまとめてやってしまっているもの。事務手続きもあるしちょっと特殊な扱いになります。</li>\n<li>その他<br>トラブル対応やセキュリティ対策、インフラのテストもこれから改善していきたい課題になります。</li>\n</ul>\n<h3 id=\"サーバ構築コード化の課題\"><a href=\"#サーバ構築コード化の課題\" class=\"headerlink\" title=\"サーバ構築コード化の課題\"></a>サーバ構築コード化の課題</h3><p>　設計に関して、我々はサーバベンダーの選定はどこかに固定はしていません。固定するとコード化はしやすくなりますが、それよりもサーバの種類によってベンダーも使い分け（コーヒーで言うとブレンド）のメリットを感じています。運用中のアプリの造りも疎結合だったりします。</p>\n<ul>\n<li>オンプレミス（ラック借り）→最近はなくなりつつあります</li>\n<li>専用サーバ→クリティカルなもの、特殊な設定が必要なもの</li>\n<li>VPS→テスト、監視用サーバなどクリティカルではないもの（安く済ませられるというメリット）</li>\n<li>クラウド→これがメインになりつつあります</li>\n<li>その他Webサービス（AWSのS3など）<ul>\n<li>DNSのレコード管理のコード化はAWSのRoute53を使えば、比較的簡単にできるのでそろそろやりたいところです。</li>\n</ul>\n</li>\n</ul>\n<p>といった感じでサーバの役割に応じて使い分けています。<br>なので、サーバの起動、OSインストール、ネットワークの設定をどうしていくかは、これから考えていかなければいけない課題です。</p>\n<h3 id=\"まとめ\"><a href=\"#まとめ\" class=\"headerlink\" title=\"まとめ\"></a>まとめ</h3><p>　インフラ業務をプログラムと同じように全てコード化できると、開発と運用がより近づき、今までよりレベルの上がった世界にいけると感じています。<br>インフラチームも開発と一緒になって生産性を上げて何かを成し遂げていきましょう。</p>\n"},{"title":"heartbeatなどでどのサーバにVIPがあるかチェックするnagiosプラグインを公開しました","date":"2015-03-03T10:00:42.000Z","_content":"https://github.com/hrix/nagios-check_vip\n","source":"_posts/heartbeatなどでどのサーバにVIPがあるかチェックするnagiosプラグインを公開しました.md","raw":"title: heartbeatなどでどのサーバにVIPがあるかチェックするnagiosプラグインを公開しました\ndate: 2015-03-03 19:00:42\ntags:\n---\nhttps://github.com/hrix/nagios-check_vip\n","slug":"heartbeatなどでどのサーバにVIPがあるかチェックするnagiosプラグインを公開しました","published":1,"updated":"2017-09-15T06:26:30.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ln8kns0002guz5pwcz99wc","content":"<p><a href=\"https://github.com/hrix/nagios-check_vip\" target=\"_blank\" rel=\"external\">https://github.com/hrix/nagios-check_vip</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/hrix/nagios-check_vip\" target=\"_blank\" rel=\"external\">https://github.com/hrix/nagios-check_vip</a></p>\n"},{"title":"History","date":"2015-04-12T16:41:39.000Z","_content":"## インターネット前\n* 1991年、音楽を作りたくてMacintosh購入。※初めての自分のパソコン\n* 1993年、ダイヤルQ2のシステム、ハードメンテ、オペレーション担当※PCのハードウエア学ぶ\n* 1995年、転職してVBのプログラム習得（２６歳、遅咲きですね）\n* 1998年、横浜の外資系CD通販のインターネットベンチャーからWeb業界に。いろいろ身に付いた。\n## Web時代\n* 1999年　神保町のインターネット会社で働き始める。\n* 2000年　学校向けASP開発(IIS, VB, SQLServer)\n* 2001年　のべ40大学導入！（2～5百万/月が５年以上！　営業の人のおかげ）\n* 2005年　退社\n* 2006～2008年　辛酸\nプログラムはあまり書かず（ネットワーク、サーバ管理、外注管理など）\n* 2008年　横浜から京都に引っ越し株式会社イー・エージェンシー入社。\n* 2009年　グループ会社の株式会社コンフォート・マーケティングに転籍\n* 2011年　株式会社イー・エージェンシーに転籍\nいろいろ勉強し直し、インフラエンジニア的な仕事に落ち着く\n","source":"_posts/history.md","raw":"title: History\ndate: 2015-04-13 01:41:39\ntags:\n---\n## インターネット前\n* 1991年、音楽を作りたくてMacintosh購入。※初めての自分のパソコン\n* 1993年、ダイヤルQ2のシステム、ハードメンテ、オペレーション担当※PCのハードウエア学ぶ\n* 1995年、転職してVBのプログラム習得（２６歳、遅咲きですね）\n* 1998年、横浜の外資系CD通販のインターネットベンチャーからWeb業界に。いろいろ身に付いた。\n## Web時代\n* 1999年　神保町のインターネット会社で働き始める。\n* 2000年　学校向けASP開発(IIS, VB, SQLServer)\n* 2001年　のべ40大学導入！（2～5百万/月が５年以上！　営業の人のおかげ）\n* 2005年　退社\n* 2006～2008年　辛酸\nプログラムはあまり書かず（ネットワーク、サーバ管理、外注管理など）\n* 2008年　横浜から京都に引っ越し株式会社イー・エージェンシー入社。\n* 2009年　グループ会社の株式会社コンフォート・マーケティングに転籍\n* 2011年　株式会社イー・エージェンシーに転籍\nいろいろ勉強し直し、インフラエンジニア的な仕事に落ち着く\n","slug":"history","published":1,"updated":"2017-09-15T06:26:30.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ln8knu0003guz59nypew62","content":"<h2 id=\"インターネット前\"><a href=\"#インターネット前\" class=\"headerlink\" title=\"インターネット前\"></a>インターネット前</h2><ul>\n<li>1991年、音楽を作りたくてMacintosh購入。※初めての自分のパソコン</li>\n<li>1993年、ダイヤルQ2のシステム、ハードメンテ、オペレーション担当※PCのハードウエア学ぶ</li>\n<li>1995年、転職してVBのプログラム習得（２６歳、遅咲きですね）</li>\n<li>1998年、横浜の外資系CD通販のインターネットベンチャーからWeb業界に。いろいろ身に付いた。<h2 id=\"Web時代\"><a href=\"#Web時代\" class=\"headerlink\" title=\"Web時代\"></a>Web時代</h2></li>\n<li>1999年　神保町のインターネット会社で働き始める。</li>\n<li>2000年　学校向けASP開発(IIS, VB, SQLServer)</li>\n<li>2001年　のべ40大学導入！（2～5百万/月が５年以上！　営業の人のおかげ）</li>\n<li>2005年　退社</li>\n<li>2006～2008年　辛酸<br>プログラムはあまり書かず（ネットワーク、サーバ管理、外注管理など）</li>\n<li>2008年　横浜から京都に引っ越し株式会社イー・エージェンシー入社。</li>\n<li>2009年　グループ会社の株式会社コンフォート・マーケティングに転籍</li>\n<li>2011年　株式会社イー・エージェンシーに転籍<br>いろいろ勉強し直し、インフラエンジニア的な仕事に落ち着く</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"インターネット前\"><a href=\"#インターネット前\" class=\"headerlink\" title=\"インターネット前\"></a>インターネット前</h2><ul>\n<li>1991年、音楽を作りたくてMacintosh購入。※初めての自分のパソコン</li>\n<li>1993年、ダイヤルQ2のシステム、ハードメンテ、オペレーション担当※PCのハードウエア学ぶ</li>\n<li>1995年、転職してVBのプログラム習得（２６歳、遅咲きですね）</li>\n<li>1998年、横浜の外資系CD通販のインターネットベンチャーからWeb業界に。いろいろ身に付いた。<h2 id=\"Web時代\"><a href=\"#Web時代\" class=\"headerlink\" title=\"Web時代\"></a>Web時代</h2></li>\n<li>1999年　神保町のインターネット会社で働き始める。</li>\n<li>2000年　学校向けASP開発(IIS, VB, SQLServer)</li>\n<li>2001年　のべ40大学導入！（2～5百万/月が５年以上！　営業の人のおかげ）</li>\n<li>2005年　退社</li>\n<li>2006～2008年　辛酸<br>プログラムはあまり書かず（ネットワーク、サーバ管理、外注管理など）</li>\n<li>2008年　横浜から京都に引っ越し株式会社イー・エージェンシー入社。</li>\n<li>2009年　グループ会社の株式会社コンフォート・マーケティングに転籍</li>\n<li>2011年　株式会社イー・エージェンシーに転籍<br>いろいろ勉強し直し、インフラエンジニア的な仕事に落ち着く</li>\n</ul>\n"},{"title":"this site's recipe","date":"2015-04-13T03:48:32.000Z","_content":"## このサイトの作り方\n手軽にブログサイトのようなものを作りたく、githubの機能と静的ページ出力のhexoというフリーソフトで作りました。\n1. linux環境を作る（私はwindows7+vagrant+virtualboxで作りました)\n1. node.js(nvm)をインストールする\n    * 参考 http://liginc.co.jp/web/programming/server/104594\n1. hexoをインストールしてブログを作る\n    * デザインをいじるためtheme(casper)を追加でインストールしました\n1. github pages機能を使うためhrix.github.ioというリポジトリを作る\n1. 上記リポジトリをlinux環境にclone\n1. hexoでできたファイルを全部cloneしたディレクトリに移し、リポジトリに追加\n1. _config.ymlを編集して調整しhexoを立ち上げる。(hexo server)\n1. ローカル環境でmdファイルをプレビューしながら編集（utf8で保存すること）\n1. 静的ページ(html)発行（hexo generate）\n    * theme以下のcssを直した場合、一度全部消して（hexo clean）からgenerateしないとcssの変更は反映されないようです\n1. ソースのmdも含めてgithubにpush\n    * https://github.com/hrix/hrix.github.io　がリポジトリになります。\n    * hexoで静的ページだけをデプロイする仕組みもあるようですが、全部一つのリポジトリに入れることにしました。\nそのため、http://hrix.github.io/public/　がトップページになりますが、今回は気にしません。\n\n### 感想\n* hexo便利\n    * シンプルで動作が軽快なので楽しい\n    * 設定ファイル（_config.yml）分かりやすい\n* github, mdファイルを使えることは必要\n* でも全部で無料できる。\n","source":"_posts/this-site-s-recipe.md","raw":"title: \"this site's recipe\"\ndate: 2015-04-13 12:48:32\ntags:\n---\n## このサイトの作り方\n手軽にブログサイトのようなものを作りたく、githubの機能と静的ページ出力のhexoというフリーソフトで作りました。\n1. linux環境を作る（私はwindows7+vagrant+virtualboxで作りました)\n1. node.js(nvm)をインストールする\n    * 参考 http://liginc.co.jp/web/programming/server/104594\n1. hexoをインストールしてブログを作る\n    * デザインをいじるためtheme(casper)を追加でインストールしました\n1. github pages機能を使うためhrix.github.ioというリポジトリを作る\n1. 上記リポジトリをlinux環境にclone\n1. hexoでできたファイルを全部cloneしたディレクトリに移し、リポジトリに追加\n1. _config.ymlを編集して調整しhexoを立ち上げる。(hexo server)\n1. ローカル環境でmdファイルをプレビューしながら編集（utf8で保存すること）\n1. 静的ページ(html)発行（hexo generate）\n    * theme以下のcssを直した場合、一度全部消して（hexo clean）からgenerateしないとcssの変更は反映されないようです\n1. ソースのmdも含めてgithubにpush\n    * https://github.com/hrix/hrix.github.io　がリポジトリになります。\n    * hexoで静的ページだけをデプロイする仕組みもあるようですが、全部一つのリポジトリに入れることにしました。\nそのため、http://hrix.github.io/public/　がトップページになりますが、今回は気にしません。\n\n### 感想\n* hexo便利\n    * シンプルで動作が軽快なので楽しい\n    * 設定ファイル（_config.yml）分かりやすい\n* github, mdファイルを使えることは必要\n* でも全部で無料できる。\n","slug":"this-site-s-recipe","published":1,"updated":"2017-09-15T06:26:30.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ln8knv0004guz5w4na0k67","content":"<h2 id=\"このサイトの作り方\"><a href=\"#このサイトの作り方\" class=\"headerlink\" title=\"このサイトの作り方\"></a>このサイトの作り方</h2><p>手軽にブログサイトのようなものを作りたく、githubの機能と静的ページ出力のhexoというフリーソフトで作りました。</p>\n<ol>\n<li>linux環境を作る（私はwindows7+vagrant+virtualboxで作りました)</li>\n<li>node.js(nvm)をインストールする<ul>\n<li>参考 <a href=\"http://liginc.co.jp/web/programming/server/104594\" target=\"_blank\" rel=\"external\">http://liginc.co.jp/web/programming/server/104594</a></li>\n</ul>\n</li>\n<li>hexoをインストールしてブログを作る<ul>\n<li>デザインをいじるためtheme(casper)を追加でインストールしました</li>\n</ul>\n</li>\n<li>github pages機能を使うためhrix.github.ioというリポジトリを作る</li>\n<li>上記リポジトリをlinux環境にclone</li>\n<li>hexoでできたファイルを全部cloneしたディレクトリに移し、リポジトリに追加</li>\n<li>_config.ymlを編集して調整しhexoを立ち上げる。(hexo server)</li>\n<li>ローカル環境でmdファイルをプレビューしながら編集（utf8で保存すること）</li>\n<li>静的ページ(html)発行（hexo generate）<ul>\n<li>theme以下のcssを直した場合、一度全部消して（hexo clean）からgenerateしないとcssの変更は反映されないようです</li>\n</ul>\n</li>\n<li>ソースのmdも含めてgithubにpush<ul>\n<li><a href=\"https://github.com/hrix/hrix.github.io\" target=\"_blank\" rel=\"external\">https://github.com/hrix/hrix.github.io</a>　がリポジトリになります。</li>\n<li>hexoで静的ページだけをデプロイする仕組みもあるようですが、全部一つのリポジトリに入れることにしました。<br>そのため、<a href=\"http://hrix.github.io/public/\">http://hrix.github.io/public/</a>　がトップページになりますが、今回は気にしません。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"感想\"><a href=\"#感想\" class=\"headerlink\" title=\"感想\"></a>感想</h3><ul>\n<li>hexo便利<ul>\n<li>シンプルで動作が軽快なので楽しい</li>\n<li>設定ファイル（_config.yml）分かりやすい</li>\n</ul>\n</li>\n<li>github, mdファイルを使えることは必要</li>\n<li>でも全部で無料できる。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"このサイトの作り方\"><a href=\"#このサイトの作り方\" class=\"headerlink\" title=\"このサイトの作り方\"></a>このサイトの作り方</h2><p>手軽にブログサイトのようなものを作りたく、githubの機能と静的ページ出力のhexoというフリーソフトで作りました。</p>\n<ol>\n<li>linux環境を作る（私はwindows7+vagrant+virtualboxで作りました)</li>\n<li>node.js(nvm)をインストールする<ul>\n<li>参考 <a href=\"http://liginc.co.jp/web/programming/server/104594\" target=\"_blank\" rel=\"external\">http://liginc.co.jp/web/programming/server/104594</a></li>\n</ul>\n</li>\n<li>hexoをインストールしてブログを作る<ul>\n<li>デザインをいじるためtheme(casper)を追加でインストールしました</li>\n</ul>\n</li>\n<li>github pages機能を使うためhrix.github.ioというリポジトリを作る</li>\n<li>上記リポジトリをlinux環境にclone</li>\n<li>hexoでできたファイルを全部cloneしたディレクトリに移し、リポジトリに追加</li>\n<li>_config.ymlを編集して調整しhexoを立ち上げる。(hexo server)</li>\n<li>ローカル環境でmdファイルをプレビューしながら編集（utf8で保存すること）</li>\n<li>静的ページ(html)発行（hexo generate）<ul>\n<li>theme以下のcssを直した場合、一度全部消して（hexo clean）からgenerateしないとcssの変更は反映されないようです</li>\n</ul>\n</li>\n<li>ソースのmdも含めてgithubにpush<ul>\n<li><a href=\"https://github.com/hrix/hrix.github.io\" target=\"_blank\" rel=\"external\">https://github.com/hrix/hrix.github.io</a>　がリポジトリになります。</li>\n<li>hexoで静的ページだけをデプロイする仕組みもあるようですが、全部一つのリポジトリに入れることにしました。<br>そのため、<a href=\"http://hrix.github.io/public/\">http://hrix.github.io/public/</a>　がトップページになりますが、今回は気にしません。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"感想\"><a href=\"#感想\" class=\"headerlink\" title=\"感想\"></a>感想</h3><ul>\n<li>hexo便利<ul>\n<li>シンプルで動作が軽快なので楽しい</li>\n<li>設定ファイル（_config.yml）分かりやすい</li>\n</ul>\n</li>\n<li>github, mdファイルを使えることは必要</li>\n<li>でも全部で無料できる。</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}