{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1505458118643},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1505458118643},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1505458118643},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1505458118643},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1505458118643},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1505458118647},{"_id":"source/_posts/SSLの脆弱性FREAK最低限の確認.md","hash":"cfa63aef9c7d32623acdf2ca224050399b6a079f","modified":1505456790529},{"_id":"source/_posts/about-infrastructure-engineering.md","hash":"fffbf2a016ad078303ad60cab943dc1793169227","modified":1505456790529},{"_id":"source/_posts/heartbeatなどでどのサーバにVIPがあるかチェックするnagiosプラグインを公開しました.md","hash":"295608a9f61af5daa61bb825b9ed26842429f42c","modified":1505456790529},{"_id":"source/_posts/history.md","hash":"9a90858e97f66950d070590ff80295ef551b0f31","modified":1505456790529},{"_id":"source/_posts/this-site-s-recipe.md","hash":"1d586ea2228fdbf265b554202291a091e1ab7317","modified":1505456790529},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1505458118643},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1505458118643},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1505458118643},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1505458118643},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1505458118643},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1505458118643},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1505458118643},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1505458118645},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1505458118645},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1505458118645},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1505458118645},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1505458118647},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1505458118647},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1505458118647},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1505458118647},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1505458118643},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1505458118643},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1505458118643},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1505458118643},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1505458118643},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1505458118645},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1505458118645},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1505458118645},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1505458118645},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1505458118645},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1505458118645},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1505458118645},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1505458118645},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1505458118645},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1505458118645},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1505458118647},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1505458118647},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1505458118652},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1505458118652},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1505458118652},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1505458118652},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1505458118652},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1505458118652},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1505458118652},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1505458118652},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1505458118652},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1505458118654},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1505458118654},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1505458118645},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1505458118645},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1505458118645},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1505458118645},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1505458118645},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1505458118645},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1505458118647},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1505458118647},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1505458118647},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1505458118647},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1505458118647},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1505458118647},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1505458118647},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1505458118647},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1505458118647},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1505458118647},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1505458118647},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1505458118647},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1505458118648},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1505458118648},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1505458118650},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1505458118652},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1505458118652},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1505458118652},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1505458118652},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1505458118652},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1505458118652},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1505458118650},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1505458118649},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1505458118651}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"SSLの脆弱性FREAK最低限の確認","date":"2015-03-05T01:18:29.000Z","_content":"SSLの深刻な脆弱性「FREAK」というのが話題になっています。\n対策できていない場合、SSL通信が乗っ取られる危険があるので関係するWebサーバはチェックしておくとよいです。\n\nこれのチェック方法・対応ですが\nCentOS6/Apacheの組み合わせであれば、以下のような対策が考えられます。\n\n### ①適当なサーバから問題の暗号形式になっていないかチェック\n\n```\n$ openssl s_client -connect [対象のドメイン]:443 -cipher EXPORT\n```\n※結果\n> handshake failureとでて15行ぐらいで終わったら問題なし、\nそうではなく、たくさん暗号が出て\n> Server Temp Key: RSA, 512 bits\nなど出たら、問題ありです。\n※Apacheの場合ssl.conf（CentOS6）ではデフォルト\n> SSLCipherSuite ALL:!ADH:!EXPORT:!SSLv2:RC4+RSA:+HIGH:+MEDIUM:+LOW\nとなってあってこれが効いていれば問題なしですが、\n設定の仕方によって無効になってしまっている場合もあるので\nSSLCipherSuiteを有効になるよう調整するなど確認が必要です。\n\n\n### ②（CentOS6/7）2015/1/21にopensslのモジュールアップデートが出ているのでアップデートする\n\n```\n# yum update openssl\n```\n\n* ①が問題なければ②はそれほど急がなくてもよいかと。\n* 以下がまとまっていて分かりやすいかと思いました。\nhttp://d.hatena.ne.jp/Kango/20150304/1425448983\n","source":"_posts/SSLの脆弱性FREAK最低限の確認.md","raw":"title: SSLの脆弱性FREAK最低限の確認\ndate: 2015-03-05 10:18:29\ntags:\n---\nSSLの深刻な脆弱性「FREAK」というのが話題になっています。\n対策できていない場合、SSL通信が乗っ取られる危険があるので関係するWebサーバはチェックしておくとよいです。\n\nこれのチェック方法・対応ですが\nCentOS6/Apacheの組み合わせであれば、以下のような対策が考えられます。\n\n### ①適当なサーバから問題の暗号形式になっていないかチェック\n\n```\n$ openssl s_client -connect [対象のドメイン]:443 -cipher EXPORT\n```\n※結果\n> handshake failureとでて15行ぐらいで終わったら問題なし、\nそうではなく、たくさん暗号が出て\n> Server Temp Key: RSA, 512 bits\nなど出たら、問題ありです。\n※Apacheの場合ssl.conf（CentOS6）ではデフォルト\n> SSLCipherSuite ALL:!ADH:!EXPORT:!SSLv2:RC4+RSA:+HIGH:+MEDIUM:+LOW\nとなってあってこれが効いていれば問題なしですが、\n設定の仕方によって無効になってしまっている場合もあるので\nSSLCipherSuiteを有効になるよう調整するなど確認が必要です。\n\n\n### ②（CentOS6/7）2015/1/21にopensslのモジュールアップデートが出ているのでアップデートする\n\n```\n# yum update openssl\n```\n\n* ①が問題なければ②はそれほど急がなくてもよいかと。\n* 以下がまとまっていて分かりやすいかと思いました。\nhttp://d.hatena.ne.jp/Kango/20150304/1425448983\n","slug":"SSLの脆弱性FREAK最低限の確認","published":1,"updated":"2017-09-15T06:26:30.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ljdtb600007dz5s0ennj6x","content":"<p>SSLの深刻な脆弱性「FREAK」というのが話題になっています。<br>対策できていない場合、SSL通信が乗っ取られる危険があるので関係するWebサーバはチェックしておくとよいです。</p>\n<p>これのチェック方法・対応ですが<br>CentOS6/Apacheの組み合わせであれば、以下のような対策が考えられます。</p>\n<h3 id=\"①適当なサーバから問題の暗号形式になっていないかチェック\"><a href=\"#①適当なサーバから問題の暗号形式になっていないかチェック\" class=\"headerlink\" title=\"①適当なサーバから問題の暗号形式になっていないかチェック\"></a>①適当なサーバから問題の暗号形式になっていないかチェック</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ openssl s_client -connect [対象のドメイン]:443 -cipher EXPORT</div></pre></td></tr></table></figure>\n<p>※結果</p>\n<blockquote>\n<p>handshake failureとでて15行ぐらいで終わったら問題なし、<br>そうではなく、たくさん暗号が出て<br>Server Temp Key: RSA, 512 bits<br>など出たら、問題ありです。<br>※Apacheの場合ssl.conf（CentOS6）ではデフォルト<br>SSLCipherSuite ALL:!ADH:!EXPORT:!SSLv2:RC4+RSA:+HIGH:+MEDIUM:+LOW<br>となってあってこれが効いていれば問題なしですが、<br>設定の仕方によって無効になってしまっている場合もあるので<br>SSLCipherSuiteを有効になるよう調整するなど確認が必要です。</p>\n</blockquote>\n<h3 id=\"②（CentOS6-7）2015-1-21にopensslのモジュールアップデートが出ているのでアップデートする\"><a href=\"#②（CentOS6-7）2015-1-21にopensslのモジュールアップデートが出ているのでアップデートする\" class=\"headerlink\" title=\"②（CentOS6/7）2015/1/21にopensslのモジュールアップデートが出ているのでアップデートする\"></a>②（CentOS6/7）2015/1/21にopensslのモジュールアップデートが出ているのでアップデートする</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># yum update openssl</div></pre></td></tr></table></figure>\n<ul>\n<li>①が問題なければ②はそれほど急がなくてもよいかと。</li>\n<li>以下がまとまっていて分かりやすいかと思いました。<br><a href=\"http://d.hatena.ne.jp/Kango/20150304/1425448983\" target=\"_blank\" rel=\"external\">http://d.hatena.ne.jp/Kango/20150304/1425448983</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>SSLの深刻な脆弱性「FREAK」というのが話題になっています。<br>対策できていない場合、SSL通信が乗っ取られる危険があるので関係するWebサーバはチェックしておくとよいです。</p>\n<p>これのチェック方法・対応ですが<br>CentOS6/Apacheの組み合わせであれば、以下のような対策が考えられます。</p>\n<h3 id=\"①適当なサーバから問題の暗号形式になっていないかチェック\"><a href=\"#①適当なサーバから問題の暗号形式になっていないかチェック\" class=\"headerlink\" title=\"①適当なサーバから問題の暗号形式になっていないかチェック\"></a>①適当なサーバから問題の暗号形式になっていないかチェック</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ openssl s_client -connect [対象のドメイン]:443 -cipher EXPORT</div></pre></td></tr></table></figure>\n<p>※結果</p>\n<blockquote>\n<p>handshake failureとでて15行ぐらいで終わったら問題なし、<br>そうではなく、たくさん暗号が出て<br>Server Temp Key: RSA, 512 bits<br>など出たら、問題ありです。<br>※Apacheの場合ssl.conf（CentOS6）ではデフォルト<br>SSLCipherSuite ALL:!ADH:!EXPORT:!SSLv2:RC4+RSA:+HIGH:+MEDIUM:+LOW<br>となってあってこれが効いていれば問題なしですが、<br>設定の仕方によって無効になってしまっている場合もあるので<br>SSLCipherSuiteを有効になるよう調整するなど確認が必要です。</p>\n</blockquote>\n<h3 id=\"②（CentOS6-7）2015-1-21にopensslのモジュールアップデートが出ているのでアップデートする\"><a href=\"#②（CentOS6-7）2015-1-21にopensslのモジュールアップデートが出ているのでアップデートする\" class=\"headerlink\" title=\"②（CentOS6/7）2015/1/21にopensslのモジュールアップデートが出ているのでアップデートする\"></a>②（CentOS6/7）2015/1/21にopensslのモジュールアップデートが出ているのでアップデートする</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># yum update openssl</div></pre></td></tr></table></figure>\n<ul>\n<li>①が問題なければ②はそれほど急がなくてもよいかと。</li>\n<li>以下がまとまっていて分かりやすいかと思いました。<br><a href=\"http://d.hatena.ne.jp/Kango/20150304/1425448983\" target=\"_blank\" rel=\"external\">http://d.hatena.ne.jp/Kango/20150304/1425448983</a></li>\n</ul>\n"},{"title":"最近のインフラエンジニアの仕事","date":"2015-04-12T06:58:45.000Z","_content":"\n自社プロダクト部の平井です。部では二名いるインフラ担当の一人です\n\nインフラ担当って何をやっているのか？　少し分かりにくいのと、新しいことも取り入れながらやっていっていますので、仕事のご紹介したいと思います。\n\n\n## インフラエンジニアとは？\n仕事として分けると大きく二つ、\n* サーバ構築\n* 日々の運用\nがあります。\n前者は、インフラ設計、新しいサーバの立ち上げ、後者は、稼働中のサーバの監視、メンテナンス、トラブル対応、セキュリティ対策になります\n\n今までこれらを手を動かして作業している部分が大きかったのですが、少しづつプログラム開発のようなコード化を進めていっているのでそちらを紹介します。\n\n## インフラのコード化ついて\n以前、もう一人のインフラ担当が以下のような事例紹介を発表しました。\n> インフラ構築の自動化・量産化。e-Agencyのクラウドプロダクト部における Chef 導入事例を紹介  \n> http://www.e-agency.co.jp/column/20140724.html  \n\nどれくらい大変なのか、その後どのように実践していったか、途中経過をお知らせします。\n\n### コード化の実践状況\n\n 以前の手作業と、コード化作業との比較ですが、以下のような特徴があり、インフラチームのエンジニアと情報共有がグンと進んで来ているのを実感できています。\n\n* 一度作った手順（レシピ）をリポジトリ（Githubなど）に置いて再利用ができる\n* どういう設定をしたか、いちいちサーバに入って確認しなくてよい（記憶に頼らなくてよい、メモの漏れも気にしなくて良い）といったメリットがあります。反面\n* レシピを書かないといけないので、最初は手で立ち上げるよりかは時間がかかる。\n\n### サーバ構築\n新規でサーバを立ち上げる場合は原則、Chefで構築したものを投入するようにしています。\n具体的には主にミドルウエア（Apache, Nginx, MySQL, Ruby, PHPなど）のインストールを今まで手作業でやっていたものをChefに置き換えています。  \n\n### 日々の運用\n監視部分はNagios, Muninといったツールをカスタマイズして使っています。これらの設定ファイルはGithubで履歴管理をしています。  \n不定期のメンテナンスでログインする場合、サーバ台数が100台以上になってきて、こちらも手作業が辛くなってきているので、ansibleというツールを使っています。こちらも手順がコード化できます。  \nansibleはchefとかぶるツールではあるのですが、Chefと違って手作業でインストールしたサーバに対しても簡単に適用できるということで、全てのサーバに対してやる作業に使っています。\n\nChefはきちんと整理して共有しやすくしてくれるツール。ansibleは運用を楽にしてくれるツールという使い分けになります。\nしかし手でも同じことをやった経験があった方が、これらのツールになじみやすいと思います。\n\n### その他\n* SSL証明書の運用\n暗号化と身元確認をまとめてやってしまっているもの。事務手続きもあるしちょっと特殊な扱いになります。\n* その他\nトラブル対応やセキュリティ対策、インフラのテストもこれから改善していきたい課題になります。\n\n### サーバ構築コード化の課題\n\n　設計に関して、我々はサーバベンダーの選定はどこかに固定はしていません。固定するとコード化はしやすくなりますが、それよりもサーバの種類によってベンダーも使い分け（コーヒーで言うとブレンド）のメリットを感じています。運用中のアプリの造りも疎結合だったりします。\n* オンプレミス（ラック借り）→最近はなくなりつつあります\n* 専用サーバ→クリティカルなもの、特殊な設定が必要なもの\n* VPS→テスト、監視用サーバなどクリティカルではないもの（安く済ませられるというメリット）\n* クラウド→これがメインになりつつあります\n* その他Webサービス（AWSのS3など）\n    * DNSのレコード管理のコード化はAWSのRoute53を使えば、比較的簡単にできるのでそろそろやりたいところです。\n\nといった感じでサーバの役割に応じて使い分けています。\nなので、サーバの起動、OSインストール、ネットワークの設定をどうしていくかは、これから考えていかなければいけない課題です。\n\n\n### まとめ\n　インフラ業務をプログラムと同じように全てコード化できると、開発と運用がより近づき、今までよりレベルの上がった世界にいけると感じています。\nインフラチームも開発と一緒になって生産性を上げて何かを成し遂げていきましょう。\n","source":"_posts/about-infrastructure-engineering.md","raw":"title: 最近のインフラエンジニアの仕事\ndate: 2015-04-12 15:58:45\ntags:\n---\n\n自社プロダクト部の平井です。部では二名いるインフラ担当の一人です\n\nインフラ担当って何をやっているのか？　少し分かりにくいのと、新しいことも取り入れながらやっていっていますので、仕事のご紹介したいと思います。\n\n\n## インフラエンジニアとは？\n仕事として分けると大きく二つ、\n* サーバ構築\n* 日々の運用\nがあります。\n前者は、インフラ設計、新しいサーバの立ち上げ、後者は、稼働中のサーバの監視、メンテナンス、トラブル対応、セキュリティ対策になります\n\n今までこれらを手を動かして作業している部分が大きかったのですが、少しづつプログラム開発のようなコード化を進めていっているのでそちらを紹介します。\n\n## インフラのコード化ついて\n以前、もう一人のインフラ担当が以下のような事例紹介を発表しました。\n> インフラ構築の自動化・量産化。e-Agencyのクラウドプロダクト部における Chef 導入事例を紹介  \n> http://www.e-agency.co.jp/column/20140724.html  \n\nどれくらい大変なのか、その後どのように実践していったか、途中経過をお知らせします。\n\n### コード化の実践状況\n\n 以前の手作業と、コード化作業との比較ですが、以下のような特徴があり、インフラチームのエンジニアと情報共有がグンと進んで来ているのを実感できています。\n\n* 一度作った手順（レシピ）をリポジトリ（Githubなど）に置いて再利用ができる\n* どういう設定をしたか、いちいちサーバに入って確認しなくてよい（記憶に頼らなくてよい、メモの漏れも気にしなくて良い）といったメリットがあります。反面\n* レシピを書かないといけないので、最初は手で立ち上げるよりかは時間がかかる。\n\n### サーバ構築\n新規でサーバを立ち上げる場合は原則、Chefで構築したものを投入するようにしています。\n具体的には主にミドルウエア（Apache, Nginx, MySQL, Ruby, PHPなど）のインストールを今まで手作業でやっていたものをChefに置き換えています。  \n\n### 日々の運用\n監視部分はNagios, Muninといったツールをカスタマイズして使っています。これらの設定ファイルはGithubで履歴管理をしています。  \n不定期のメンテナンスでログインする場合、サーバ台数が100台以上になってきて、こちらも手作業が辛くなってきているので、ansibleというツールを使っています。こちらも手順がコード化できます。  \nansibleはchefとかぶるツールではあるのですが、Chefと違って手作業でインストールしたサーバに対しても簡単に適用できるということで、全てのサーバに対してやる作業に使っています。\n\nChefはきちんと整理して共有しやすくしてくれるツール。ansibleは運用を楽にしてくれるツールという使い分けになります。\nしかし手でも同じことをやった経験があった方が、これらのツールになじみやすいと思います。\n\n### その他\n* SSL証明書の運用\n暗号化と身元確認をまとめてやってしまっているもの。事務手続きもあるしちょっと特殊な扱いになります。\n* その他\nトラブル対応やセキュリティ対策、インフラのテストもこれから改善していきたい課題になります。\n\n### サーバ構築コード化の課題\n\n　設計に関して、我々はサーバベンダーの選定はどこかに固定はしていません。固定するとコード化はしやすくなりますが、それよりもサーバの種類によってベンダーも使い分け（コーヒーで言うとブレンド）のメリットを感じています。運用中のアプリの造りも疎結合だったりします。\n* オンプレミス（ラック借り）→最近はなくなりつつあります\n* 専用サーバ→クリティカルなもの、特殊な設定が必要なもの\n* VPS→テスト、監視用サーバなどクリティカルではないもの（安く済ませられるというメリット）\n* クラウド→これがメインになりつつあります\n* その他Webサービス（AWSのS3など）\n    * DNSのレコード管理のコード化はAWSのRoute53を使えば、比較的簡単にできるのでそろそろやりたいところです。\n\nといった感じでサーバの役割に応じて使い分けています。\nなので、サーバの起動、OSインストール、ネットワークの設定をどうしていくかは、これから考えていかなければいけない課題です。\n\n\n### まとめ\n　インフラ業務をプログラムと同じように全てコード化できると、開発と運用がより近づき、今までよりレベルの上がった世界にいけると感じています。\nインフラチームも開発と一緒になって生産性を上げて何かを成し遂げていきましょう。\n","slug":"about-infrastructure-engineering","published":1,"updated":"2017-09-15T06:26:30.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ljdtbc00017dz51jae0wjb","content":"<p>自社プロダクト部の平井です。部では二名いるインフラ担当の一人です</p>\n<p>インフラ担当って何をやっているのか？　少し分かりにくいのと、新しいことも取り入れながらやっていっていますので、仕事のご紹介したいと思います。</p>\n<h2 id=\"インフラエンジニアとは？\"><a href=\"#インフラエンジニアとは？\" class=\"headerlink\" title=\"インフラエンジニアとは？\"></a>インフラエンジニアとは？</h2><p>仕事として分けると大きく二つ、</p>\n<ul>\n<li>サーバ構築</li>\n<li>日々の運用<br>があります。<br>前者は、インフラ設計、新しいサーバの立ち上げ、後者は、稼働中のサーバの監視、メンテナンス、トラブル対応、セキュリティ対策になります</li>\n</ul>\n<p>今までこれらを手を動かして作業している部分が大きかったのですが、少しづつプログラム開発のようなコード化を進めていっているのでそちらを紹介します。</p>\n<h2 id=\"インフラのコード化ついて\"><a href=\"#インフラのコード化ついて\" class=\"headerlink\" title=\"インフラのコード化ついて\"></a>インフラのコード化ついて</h2><p>以前、もう一人のインフラ担当が以下のような事例紹介を発表しました。</p>\n<blockquote>\n<p>インフラ構築の自動化・量産化。e-Agencyのクラウドプロダクト部における Chef 導入事例を紹介<br><a href=\"http://www.e-agency.co.jp/column/20140724.html\" target=\"_blank\" rel=\"external\">http://www.e-agency.co.jp/column/20140724.html</a>  </p>\n</blockquote>\n<p>どれくらい大変なのか、その後どのように実践していったか、途中経過をお知らせします。</p>\n<h3 id=\"コード化の実践状況\"><a href=\"#コード化の実践状況\" class=\"headerlink\" title=\"コード化の実践状況\"></a>コード化の実践状況</h3><p> 以前の手作業と、コード化作業との比較ですが、以下のような特徴があり、インフラチームのエンジニアと情報共有がグンと進んで来ているのを実感できています。</p>\n<ul>\n<li>一度作った手順（レシピ）をリポジトリ（Githubなど）に置いて再利用ができる</li>\n<li>どういう設定をしたか、いちいちサーバに入って確認しなくてよい（記憶に頼らなくてよい、メモの漏れも気にしなくて良い）といったメリットがあります。反面</li>\n<li>レシピを書かないといけないので、最初は手で立ち上げるよりかは時間がかかる。</li>\n</ul>\n<h3 id=\"サーバ構築\"><a href=\"#サーバ構築\" class=\"headerlink\" title=\"サーバ構築\"></a>サーバ構築</h3><p>新規でサーバを立ち上げる場合は原則、Chefで構築したものを投入するようにしています。<br>具体的には主にミドルウエア（Apache, Nginx, MySQL, Ruby, PHPなど）のインストールを今まで手作業でやっていたものをChefに置き換えています。  </p>\n<h3 id=\"日々の運用\"><a href=\"#日々の運用\" class=\"headerlink\" title=\"日々の運用\"></a>日々の運用</h3><p>監視部分はNagios, Muninといったツールをカスタマイズして使っています。これらの設定ファイルはGithubで履歴管理をしています。<br>不定期のメンテナンスでログインする場合、サーバ台数が100台以上になってきて、こちらも手作業が辛くなってきているので、ansibleというツールを使っています。こちらも手順がコード化できます。<br>ansibleはchefとかぶるツールではあるのですが、Chefと違って手作業でインストールしたサーバに対しても簡単に適用できるということで、全てのサーバに対してやる作業に使っています。</p>\n<p>Chefはきちんと整理して共有しやすくしてくれるツール。ansibleは運用を楽にしてくれるツールという使い分けになります。<br>しかし手でも同じことをやった経験があった方が、これらのツールになじみやすいと思います。</p>\n<h3 id=\"その他\"><a href=\"#その他\" class=\"headerlink\" title=\"その他\"></a>その他</h3><ul>\n<li>SSL証明書の運用<br>暗号化と身元確認をまとめてやってしまっているもの。事務手続きもあるしちょっと特殊な扱いになります。</li>\n<li>その他<br>トラブル対応やセキュリティ対策、インフラのテストもこれから改善していきたい課題になります。</li>\n</ul>\n<h3 id=\"サーバ構築コード化の課題\"><a href=\"#サーバ構築コード化の課題\" class=\"headerlink\" title=\"サーバ構築コード化の課題\"></a>サーバ構築コード化の課題</h3><p>　設計に関して、我々はサーバベンダーの選定はどこかに固定はしていません。固定するとコード化はしやすくなりますが、それよりもサーバの種類によってベンダーも使い分け（コーヒーで言うとブレンド）のメリットを感じています。運用中のアプリの造りも疎結合だったりします。</p>\n<ul>\n<li>オンプレミス（ラック借り）→最近はなくなりつつあります</li>\n<li>専用サーバ→クリティカルなもの、特殊な設定が必要なもの</li>\n<li>VPS→テスト、監視用サーバなどクリティカルではないもの（安く済ませられるというメリット）</li>\n<li>クラウド→これがメインになりつつあります</li>\n<li>その他Webサービス（AWSのS3など）<ul>\n<li>DNSのレコード管理のコード化はAWSのRoute53を使えば、比較的簡単にできるのでそろそろやりたいところです。</li>\n</ul>\n</li>\n</ul>\n<p>といった感じでサーバの役割に応じて使い分けています。<br>なので、サーバの起動、OSインストール、ネットワークの設定をどうしていくかは、これから考えていかなければいけない課題です。</p>\n<h3 id=\"まとめ\"><a href=\"#まとめ\" class=\"headerlink\" title=\"まとめ\"></a>まとめ</h3><p>　インフラ業務をプログラムと同じように全てコード化できると、開発と運用がより近づき、今までよりレベルの上がった世界にいけると感じています。<br>インフラチームも開発と一緒になって生産性を上げて何かを成し遂げていきましょう。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>自社プロダクト部の平井です。部では二名いるインフラ担当の一人です</p>\n<p>インフラ担当って何をやっているのか？　少し分かりにくいのと、新しいことも取り入れながらやっていっていますので、仕事のご紹介したいと思います。</p>\n<h2 id=\"インフラエンジニアとは？\"><a href=\"#インフラエンジニアとは？\" class=\"headerlink\" title=\"インフラエンジニアとは？\"></a>インフラエンジニアとは？</h2><p>仕事として分けると大きく二つ、</p>\n<ul>\n<li>サーバ構築</li>\n<li>日々の運用<br>があります。<br>前者は、インフラ設計、新しいサーバの立ち上げ、後者は、稼働中のサーバの監視、メンテナンス、トラブル対応、セキュリティ対策になります</li>\n</ul>\n<p>今までこれらを手を動かして作業している部分が大きかったのですが、少しづつプログラム開発のようなコード化を進めていっているのでそちらを紹介します。</p>\n<h2 id=\"インフラのコード化ついて\"><a href=\"#インフラのコード化ついて\" class=\"headerlink\" title=\"インフラのコード化ついて\"></a>インフラのコード化ついて</h2><p>以前、もう一人のインフラ担当が以下のような事例紹介を発表しました。</p>\n<blockquote>\n<p>インフラ構築の自動化・量産化。e-Agencyのクラウドプロダクト部における Chef 導入事例を紹介<br><a href=\"http://www.e-agency.co.jp/column/20140724.html\" target=\"_blank\" rel=\"external\">http://www.e-agency.co.jp/column/20140724.html</a>  </p>\n</blockquote>\n<p>どれくらい大変なのか、その後どのように実践していったか、途中経過をお知らせします。</p>\n<h3 id=\"コード化の実践状況\"><a href=\"#コード化の実践状況\" class=\"headerlink\" title=\"コード化の実践状況\"></a>コード化の実践状況</h3><p> 以前の手作業と、コード化作業との比較ですが、以下のような特徴があり、インフラチームのエンジニアと情報共有がグンと進んで来ているのを実感できています。</p>\n<ul>\n<li>一度作った手順（レシピ）をリポジトリ（Githubなど）に置いて再利用ができる</li>\n<li>どういう設定をしたか、いちいちサーバに入って確認しなくてよい（記憶に頼らなくてよい、メモの漏れも気にしなくて良い）といったメリットがあります。反面</li>\n<li>レシピを書かないといけないので、最初は手で立ち上げるよりかは時間がかかる。</li>\n</ul>\n<h3 id=\"サーバ構築\"><a href=\"#サーバ構築\" class=\"headerlink\" title=\"サーバ構築\"></a>サーバ構築</h3><p>新規でサーバを立ち上げる場合は原則、Chefで構築したものを投入するようにしています。<br>具体的には主にミドルウエア（Apache, Nginx, MySQL, Ruby, PHPなど）のインストールを今まで手作業でやっていたものをChefに置き換えています。  </p>\n<h3 id=\"日々の運用\"><a href=\"#日々の運用\" class=\"headerlink\" title=\"日々の運用\"></a>日々の運用</h3><p>監視部分はNagios, Muninといったツールをカスタマイズして使っています。これらの設定ファイルはGithubで履歴管理をしています。<br>不定期のメンテナンスでログインする場合、サーバ台数が100台以上になってきて、こちらも手作業が辛くなってきているので、ansibleというツールを使っています。こちらも手順がコード化できます。<br>ansibleはchefとかぶるツールではあるのですが、Chefと違って手作業でインストールしたサーバに対しても簡単に適用できるということで、全てのサーバに対してやる作業に使っています。</p>\n<p>Chefはきちんと整理して共有しやすくしてくれるツール。ansibleは運用を楽にしてくれるツールという使い分けになります。<br>しかし手でも同じことをやった経験があった方が、これらのツールになじみやすいと思います。</p>\n<h3 id=\"その他\"><a href=\"#その他\" class=\"headerlink\" title=\"その他\"></a>その他</h3><ul>\n<li>SSL証明書の運用<br>暗号化と身元確認をまとめてやってしまっているもの。事務手続きもあるしちょっと特殊な扱いになります。</li>\n<li>その他<br>トラブル対応やセキュリティ対策、インフラのテストもこれから改善していきたい課題になります。</li>\n</ul>\n<h3 id=\"サーバ構築コード化の課題\"><a href=\"#サーバ構築コード化の課題\" class=\"headerlink\" title=\"サーバ構築コード化の課題\"></a>サーバ構築コード化の課題</h3><p>　設計に関して、我々はサーバベンダーの選定はどこかに固定はしていません。固定するとコード化はしやすくなりますが、それよりもサーバの種類によってベンダーも使い分け（コーヒーで言うとブレンド）のメリットを感じています。運用中のアプリの造りも疎結合だったりします。</p>\n<ul>\n<li>オンプレミス（ラック借り）→最近はなくなりつつあります</li>\n<li>専用サーバ→クリティカルなもの、特殊な設定が必要なもの</li>\n<li>VPS→テスト、監視用サーバなどクリティカルではないもの（安く済ませられるというメリット）</li>\n<li>クラウド→これがメインになりつつあります</li>\n<li>その他Webサービス（AWSのS3など）<ul>\n<li>DNSのレコード管理のコード化はAWSのRoute53を使えば、比較的簡単にできるのでそろそろやりたいところです。</li>\n</ul>\n</li>\n</ul>\n<p>といった感じでサーバの役割に応じて使い分けています。<br>なので、サーバの起動、OSインストール、ネットワークの設定をどうしていくかは、これから考えていかなければいけない課題です。</p>\n<h3 id=\"まとめ\"><a href=\"#まとめ\" class=\"headerlink\" title=\"まとめ\"></a>まとめ</h3><p>　インフラ業務をプログラムと同じように全てコード化できると、開発と運用がより近づき、今までよりレベルの上がった世界にいけると感じています。<br>インフラチームも開発と一緒になって生産性を上げて何かを成し遂げていきましょう。</p>\n"},{"title":"heartbeatなどでどのサーバにVIPがあるかチェックするnagiosプラグインを公開しました","date":"2015-03-03T10:00:42.000Z","_content":"https://github.com/hrix/nagios-check_vip\n","source":"_posts/heartbeatなどでどのサーバにVIPがあるかチェックするnagiosプラグインを公開しました.md","raw":"title: heartbeatなどでどのサーバにVIPがあるかチェックするnagiosプラグインを公開しました\ndate: 2015-03-03 19:00:42\ntags:\n---\nhttps://github.com/hrix/nagios-check_vip\n","slug":"heartbeatなどでどのサーバにVIPがあるかチェックするnagiosプラグインを公開しました","published":1,"updated":"2017-09-15T06:26:30.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ljdtbf00027dz5vcmmke4c","content":"<p><a href=\"https://github.com/hrix/nagios-check_vip\" target=\"_blank\" rel=\"external\">https://github.com/hrix/nagios-check_vip</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/hrix/nagios-check_vip\" target=\"_blank\" rel=\"external\">https://github.com/hrix/nagios-check_vip</a></p>\n"},{"title":"History","date":"2015-04-12T16:41:39.000Z","_content":"## インターネット前\n* 1991年、音楽を作りたくてMacintosh購入。※初めての自分のパソコン\n* 1993年、ダイヤルQ2のシステム、ハードメンテ、オペレーション担当※PCのハードウエア学ぶ\n* 1995年、転職してVBのプログラム習得（２６歳、遅咲きですね）\n* 1998年、横浜の外資系CD通販のインターネットベンチャーからWeb業界に。いろいろ身に付いた。\n## Web時代\n* 1999年　神保町のインターネット会社で働き始める。\n* 2000年　学校向けASP開発(IIS, VB, SQLServer)\n* 2001年　のべ40大学導入！（2～5百万/月が５年以上！　営業の人のおかげ）\n* 2005年　退社\n* 2006～2008年　辛酸\nプログラムはあまり書かず（ネットワーク、サーバ管理、外注管理など）\n* 2008年　横浜から京都に引っ越し株式会社イー・エージェンシー入社。\n* 2009年　グループ会社の株式会社コンフォート・マーケティングに転籍\n* 2011年　株式会社イー・エージェンシーに転籍\nいろいろ勉強し直し、インフラエンジニア的な仕事に落ち着く\n","source":"_posts/history.md","raw":"title: History\ndate: 2015-04-13 01:41:39\ntags:\n---\n## インターネット前\n* 1991年、音楽を作りたくてMacintosh購入。※初めての自分のパソコン\n* 1993年、ダイヤルQ2のシステム、ハードメンテ、オペレーション担当※PCのハードウエア学ぶ\n* 1995年、転職してVBのプログラム習得（２６歳、遅咲きですね）\n* 1998年、横浜の外資系CD通販のインターネットベンチャーからWeb業界に。いろいろ身に付いた。\n## Web時代\n* 1999年　神保町のインターネット会社で働き始める。\n* 2000年　学校向けASP開発(IIS, VB, SQLServer)\n* 2001年　のべ40大学導入！（2～5百万/月が５年以上！　営業の人のおかげ）\n* 2005年　退社\n* 2006～2008年　辛酸\nプログラムはあまり書かず（ネットワーク、サーバ管理、外注管理など）\n* 2008年　横浜から京都に引っ越し株式会社イー・エージェンシー入社。\n* 2009年　グループ会社の株式会社コンフォート・マーケティングに転籍\n* 2011年　株式会社イー・エージェンシーに転籍\nいろいろ勉強し直し、インフラエンジニア的な仕事に落ち着く\n","slug":"history","published":1,"updated":"2017-09-15T06:26:30.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ljdtbh00037dz5zj7qmz8f","content":"<h2 id=\"インターネット前\"><a href=\"#インターネット前\" class=\"headerlink\" title=\"インターネット前\"></a>インターネット前</h2><ul>\n<li>1991年、音楽を作りたくてMacintosh購入。※初めての自分のパソコン</li>\n<li>1993年、ダイヤルQ2のシステム、ハードメンテ、オペレーション担当※PCのハードウエア学ぶ</li>\n<li>1995年、転職してVBのプログラム習得（２６歳、遅咲きですね）</li>\n<li>1998年、横浜の外資系CD通販のインターネットベンチャーからWeb業界に。いろいろ身に付いた。<h2 id=\"Web時代\"><a href=\"#Web時代\" class=\"headerlink\" title=\"Web時代\"></a>Web時代</h2></li>\n<li>1999年　神保町のインターネット会社で働き始める。</li>\n<li>2000年　学校向けASP開発(IIS, VB, SQLServer)</li>\n<li>2001年　のべ40大学導入！（2～5百万/月が５年以上！　営業の人のおかげ）</li>\n<li>2005年　退社</li>\n<li>2006～2008年　辛酸<br>プログラムはあまり書かず（ネットワーク、サーバ管理、外注管理など）</li>\n<li>2008年　横浜から京都に引っ越し株式会社イー・エージェンシー入社。</li>\n<li>2009年　グループ会社の株式会社コンフォート・マーケティングに転籍</li>\n<li>2011年　株式会社イー・エージェンシーに転籍<br>いろいろ勉強し直し、インフラエンジニア的な仕事に落ち着く</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"インターネット前\"><a href=\"#インターネット前\" class=\"headerlink\" title=\"インターネット前\"></a>インターネット前</h2><ul>\n<li>1991年、音楽を作りたくてMacintosh購入。※初めての自分のパソコン</li>\n<li>1993年、ダイヤルQ2のシステム、ハードメンテ、オペレーション担当※PCのハードウエア学ぶ</li>\n<li>1995年、転職してVBのプログラム習得（２６歳、遅咲きですね）</li>\n<li>1998年、横浜の外資系CD通販のインターネットベンチャーからWeb業界に。いろいろ身に付いた。<h2 id=\"Web時代\"><a href=\"#Web時代\" class=\"headerlink\" title=\"Web時代\"></a>Web時代</h2></li>\n<li>1999年　神保町のインターネット会社で働き始める。</li>\n<li>2000年　学校向けASP開発(IIS, VB, SQLServer)</li>\n<li>2001年　のべ40大学導入！（2～5百万/月が５年以上！　営業の人のおかげ）</li>\n<li>2005年　退社</li>\n<li>2006～2008年　辛酸<br>プログラムはあまり書かず（ネットワーク、サーバ管理、外注管理など）</li>\n<li>2008年　横浜から京都に引っ越し株式会社イー・エージェンシー入社。</li>\n<li>2009年　グループ会社の株式会社コンフォート・マーケティングに転籍</li>\n<li>2011年　株式会社イー・エージェンシーに転籍<br>いろいろ勉強し直し、インフラエンジニア的な仕事に落ち着く</li>\n</ul>\n"},{"title":"this site's recipe","date":"2015-04-13T03:48:32.000Z","_content":"## このサイトの作り方\n手軽にブログサイトのようなものを作りたく、githubの機能と静的ページ出力のhexoというフリーソフトで作りました。\n1. linux環境を作る（私はwindows7+vagrant+virtualboxで作りました)\n1. node.js(nvm)をインストールする\n    * 参考 http://liginc.co.jp/web/programming/server/104594\n1. hexoをインストールしてブログを作る\n    * デザインをいじるためtheme(casper)を追加でインストールしました\n1. github pages機能を使うためhrix.github.ioというリポジトリを作る\n1. 上記リポジトリをlinux環境にclone\n1. hexoでできたファイルを全部cloneしたディレクトリに移し、リポジトリに追加\n1. _config.ymlを編集して調整しhexoを立ち上げる。(hexo server)\n1. ローカル環境でmdファイルをプレビューしながら編集（utf8で保存すること）\n1. 静的ページ(html)発行（hexo generate）\n    * theme以下のcssを直した場合、一度全部消して（hexo clean）からgenerateしないとcssの変更は反映されないようです\n1. ソースのmdも含めてgithubにpush\n    * https://github.com/hrix/hrix.github.io　がリポジトリになります。\n    * hexoで静的ページだけをデプロイする仕組みもあるようですが、全部一つのリポジトリに入れることにしました。\nそのため、http://hrix.github.io/public/　がトップページになりますが、今回は気にしません。\n\n### 感想\n* hexo便利\n    * シンプルで動作が軽快なので楽しい\n    * 設定ファイル（_config.yml）分かりやすい\n* github, mdファイルを使えることは必要\n* でも全部で無料できる。\n","source":"_posts/this-site-s-recipe.md","raw":"title: \"this site's recipe\"\ndate: 2015-04-13 12:48:32\ntags:\n---\n## このサイトの作り方\n手軽にブログサイトのようなものを作りたく、githubの機能と静的ページ出力のhexoというフリーソフトで作りました。\n1. linux環境を作る（私はwindows7+vagrant+virtualboxで作りました)\n1. node.js(nvm)をインストールする\n    * 参考 http://liginc.co.jp/web/programming/server/104594\n1. hexoをインストールしてブログを作る\n    * デザインをいじるためtheme(casper)を追加でインストールしました\n1. github pages機能を使うためhrix.github.ioというリポジトリを作る\n1. 上記リポジトリをlinux環境にclone\n1. hexoでできたファイルを全部cloneしたディレクトリに移し、リポジトリに追加\n1. _config.ymlを編集して調整しhexoを立ち上げる。(hexo server)\n1. ローカル環境でmdファイルをプレビューしながら編集（utf8で保存すること）\n1. 静的ページ(html)発行（hexo generate）\n    * theme以下のcssを直した場合、一度全部消して（hexo clean）からgenerateしないとcssの変更は反映されないようです\n1. ソースのmdも含めてgithubにpush\n    * https://github.com/hrix/hrix.github.io　がリポジトリになります。\n    * hexoで静的ページだけをデプロイする仕組みもあるようですが、全部一つのリポジトリに入れることにしました。\nそのため、http://hrix.github.io/public/　がトップページになりますが、今回は気にしません。\n\n### 感想\n* hexo便利\n    * シンプルで動作が軽快なので楽しい\n    * 設定ファイル（_config.yml）分かりやすい\n* github, mdファイルを使えることは必要\n* でも全部で無料できる。\n","slug":"this-site-s-recipe","published":1,"updated":"2017-09-15T06:26:30.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ljdtbj00047dz5ycqtga1i","content":"<h2 id=\"このサイトの作り方\"><a href=\"#このサイトの作り方\" class=\"headerlink\" title=\"このサイトの作り方\"></a>このサイトの作り方</h2><p>手軽にブログサイトのようなものを作りたく、githubの機能と静的ページ出力のhexoというフリーソフトで作りました。</p>\n<ol>\n<li>linux環境を作る（私はwindows7+vagrant+virtualboxで作りました)</li>\n<li>node.js(nvm)をインストールする<ul>\n<li>参考 <a href=\"http://liginc.co.jp/web/programming/server/104594\" target=\"_blank\" rel=\"external\">http://liginc.co.jp/web/programming/server/104594</a></li>\n</ul>\n</li>\n<li>hexoをインストールしてブログを作る<ul>\n<li>デザインをいじるためtheme(casper)を追加でインストールしました</li>\n</ul>\n</li>\n<li>github pages機能を使うためhrix.github.ioというリポジトリを作る</li>\n<li>上記リポジトリをlinux環境にclone</li>\n<li>hexoでできたファイルを全部cloneしたディレクトリに移し、リポジトリに追加</li>\n<li>_config.ymlを編集して調整しhexoを立ち上げる。(hexo server)</li>\n<li>ローカル環境でmdファイルをプレビューしながら編集（utf8で保存すること）</li>\n<li>静的ページ(html)発行（hexo generate）<ul>\n<li>theme以下のcssを直した場合、一度全部消して（hexo clean）からgenerateしないとcssの変更は反映されないようです</li>\n</ul>\n</li>\n<li>ソースのmdも含めてgithubにpush<ul>\n<li><a href=\"https://github.com/hrix/hrix.github.io\" target=\"_blank\" rel=\"external\">https://github.com/hrix/hrix.github.io</a>　がリポジトリになります。</li>\n<li>hexoで静的ページだけをデプロイする仕組みもあるようですが、全部一つのリポジトリに入れることにしました。<br>そのため、<a href=\"http://hrix.github.io/public/\">http://hrix.github.io/public/</a>　がトップページになりますが、今回は気にしません。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"感想\"><a href=\"#感想\" class=\"headerlink\" title=\"感想\"></a>感想</h3><ul>\n<li>hexo便利<ul>\n<li>シンプルで動作が軽快なので楽しい</li>\n<li>設定ファイル（_config.yml）分かりやすい</li>\n</ul>\n</li>\n<li>github, mdファイルを使えることは必要</li>\n<li>でも全部で無料できる。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"このサイトの作り方\"><a href=\"#このサイトの作り方\" class=\"headerlink\" title=\"このサイトの作り方\"></a>このサイトの作り方</h2><p>手軽にブログサイトのようなものを作りたく、githubの機能と静的ページ出力のhexoというフリーソフトで作りました。</p>\n<ol>\n<li>linux環境を作る（私はwindows7+vagrant+virtualboxで作りました)</li>\n<li>node.js(nvm)をインストールする<ul>\n<li>参考 <a href=\"http://liginc.co.jp/web/programming/server/104594\" target=\"_blank\" rel=\"external\">http://liginc.co.jp/web/programming/server/104594</a></li>\n</ul>\n</li>\n<li>hexoをインストールしてブログを作る<ul>\n<li>デザインをいじるためtheme(casper)を追加でインストールしました</li>\n</ul>\n</li>\n<li>github pages機能を使うためhrix.github.ioというリポジトリを作る</li>\n<li>上記リポジトリをlinux環境にclone</li>\n<li>hexoでできたファイルを全部cloneしたディレクトリに移し、リポジトリに追加</li>\n<li>_config.ymlを編集して調整しhexoを立ち上げる。(hexo server)</li>\n<li>ローカル環境でmdファイルをプレビューしながら編集（utf8で保存すること）</li>\n<li>静的ページ(html)発行（hexo generate）<ul>\n<li>theme以下のcssを直した場合、一度全部消して（hexo clean）からgenerateしないとcssの変更は反映されないようです</li>\n</ul>\n</li>\n<li>ソースのmdも含めてgithubにpush<ul>\n<li><a href=\"https://github.com/hrix/hrix.github.io\" target=\"_blank\" rel=\"external\">https://github.com/hrix/hrix.github.io</a>　がリポジトリになります。</li>\n<li>hexoで静的ページだけをデプロイする仕組みもあるようですが、全部一つのリポジトリに入れることにしました。<br>そのため、<a href=\"http://hrix.github.io/public/\">http://hrix.github.io/public/</a>　がトップページになりますが、今回は気にしません。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"感想\"><a href=\"#感想\" class=\"headerlink\" title=\"感想\"></a>感想</h3><ul>\n<li>hexo便利<ul>\n<li>シンプルで動作が軽快なので楽しい</li>\n<li>設定ファイル（_config.yml）分かりやすい</li>\n</ul>\n</li>\n<li>github, mdファイルを使えることは必要</li>\n<li>でも全部で無料できる。</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}