{"Asset":[{"_id":"themes/casper/source/css/normalize.css","path":"css/normalize.css","modified":false},{"_id":"themes/casper/source/css/screen.css","path":"css/screen.css","modified":false},{"_id":"themes/casper/source/fonts/icons.dev.svg","path":"fonts/icons.dev.svg","modified":false},{"_id":"themes/casper/source/fonts/icons.eot","path":"fonts/icons.eot","modified":false},{"_id":"themes/casper/source/fonts/icons.svg","path":"fonts/icons.svg","modified":false},{"_id":"themes/casper/source/fonts/icons.ttf","path":"fonts/icons.ttf","modified":false},{"_id":"themes/casper/source/fonts/icons.woff","path":"fonts/icons.woff","modified":false},{"_id":"themes/casper/source/js/index.js","path":"js/index.js","modified":false},{"_id":"themes/casper/source/js/jquery.fitvids.js","path":"js/jquery.fitvids.js","modified":false}],"Cache":[{"_id":"scaffolds/draft.md","mtime":1424243770322},{"_id":"scaffolds/page.md","mtime":1424243770322},{"_id":"scaffolds/photo.md","mtime":1424243770322},{"_id":"scaffolds/post.md","mtime":1424243770322},{"_id":"source/_posts/about-infrastructure-engineering.md","mtime":1428906003323},{"_id":"source/_posts/this-site-s-recipe.md","mtime":1428906027543},{"_id":"themes/casper/LICENSE","mtime":1424243770322},{"_id":"themes/casper/README.md","mtime":1424243770322},{"_id":"themes/casper/_config.yml","mtime":1424243770322},{"_id":"themes/casper/source/css/normalize.css","mtime":1424243770324},{"_id":"themes/casper/source/css/screen.css","mtime":1424243770324},{"_id":"themes/casper/source/fonts/icons.dev.svg","mtime":1424243770324},{"_id":"themes/casper/source/fonts/icons.eot","mtime":1424243770324},{"_id":"themes/casper/source/fonts/icons.svg","mtime":1424243770324},{"_id":"themes/casper/source/fonts/icons.ttf","mtime":1424243770324},{"_id":"themes/casper/source/fonts/icons.woff","mtime":1424243770324},{"_id":"themes/casper/source/js/index.js","mtime":1424243770324},{"_id":"themes/casper/source/js/jquery.fitvids.js","mtime":1424243770324},{"_id":"themes/casper/layout/archive.ejs","mtime":1424243770322},{"_id":"themes/casper/layout/category.ejs","mtime":1424243770323},{"_id":"themes/casper/layout/index.ejs","mtime":1424243770323},{"_id":"themes/casper/layout/layout.ejs","mtime":1424243770323},{"_id":"themes/casper/layout/page.ejs","mtime":1424243770323},{"_id":"themes/casper/layout/post.ejs","mtime":1424243770323},{"_id":"themes/casper/layout/tag.ejs","mtime":1424243770324},{"_id":"themes/casper/layout/casper/after_all.ejs","mtime":1424243770323},{"_id":"themes/casper/layout/casper/footer.ejs","mtime":1424243770323},{"_id":"themes/casper/layout/casper/head.ejs","mtime":1424243770323},{"_id":"themes/casper/layout/casper/header.ejs","mtime":1424243770323},{"_id":"themes/casper/layout/casper/index.ejs","mtime":1424243770323},{"_id":"themes/casper/layout/casper/post.ejs","mtime":1424243770323},{"_id":"themes/casper/layout/casper/post/author.ejs","mtime":1424243770323},{"_id":"themes/casper/layout/casper/post/comments.ejs","mtime":1424243770323},{"_id":"themes/casper/layout/casper/post/meta.ejs","mtime":1424243770323},{"_id":"themes/casper/layout/casper/post/navigation.ejs","mtime":1424243770323},{"_id":"themes/casper/layout/casper/post/share.ejs","mtime":1424243770323},{"_id":"source/_posts/heartbeatなどでどのサーバにVIPがあるかチェックするnagiosプラグインを公開しました.md","mtime":1425434509881},{"_id":"source/_posts/SSLの脆弱性FREAK最低限の確認.md","mtime":1425604973602},{"_id":"source/_posts/history.md","mtime":1428906009086}],"Category":[],"Page":[],"Post":[{"title":"this site's recipe","date":1428896912000,"tags":[],"content":"<h2 id=\"このサイトの作り方\">このサイトの作り方</h2>\n<p>手軽にブログサイトのようなものを作りたく、githubの機能と静的ページ出力のhexoというフリーソフトで作りました。</p>\n<ol>\n<li>linux環境を作る（私はwindows7+vagrant+virtualboxで作りました)</li>\n<li>node.js(nvm)をインストールする<ul>\n<li>参考 <a href=\"http://liginc.co.jp/web/programming/server/104594\" target=\"_blank\" rel=\"external\">http://liginc.co.jp/web/programming/server/104594</a></li>\n</ul>\n</li>\n<li>hexoをインストールしてブログを作る<ul>\n<li>デザインをいじるためtheme(casper)を追加でインストールしました</li>\n</ul>\n</li>\n<li>github pages機能を使うためhrix.github.ioというリポジトリを作る</li>\n<li>上記リポジトリをlinux環境にclone</li>\n<li>hexoでできたファイルを全部cloneしたディレクトリに移し、リポジトリに追加</li>\n<li>_config.ymlを編集して調整しhexoを立ち上げる。(hexo server)</li>\n<li>ローカル環境でmdファイルをプレビューしながら編集（utf8で保存すること）</li>\n<li>静的ページ(html)発行（hexo generate）<ul>\n<li>theme以下のcssを直した場合、一度全部消して（hexo clean）からgenerateしないとcssの変更は反映されないようです</li>\n</ul>\n</li>\n<li>ソースのmdも含めてgithubにpush<ul>\n<li><a href=\"https://github.com/hrix/hrix.github.io\" target=\"_blank\" rel=\"external\">https://github.com/hrix/hrix.github.io</a>　がリポジトリになります。</li>\n<li>hexoで静的ページだけをデプロイする仕組みもあるようですが、全部一つのリポジトリに入れることにしました。<br>そのため、<a href=\"http://hrix.github.io/public/\" target=\"_blank\" rel=\"external\">http://hrix.github.io/public/</a>　がトップページになりますが、今回は気にしません。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"感想\">感想</h3>\n<ul>\n<li>hexo便利<ul>\n<li>シンプルで動作が軽快なので楽しい</li>\n<li>設定ファイル（_config.yml）分かりやすい</li>\n</ul>\n</li>\n<li>github, mdファイルを使えることは必要</li>\n<li>でも全部で無料できる。</li>\n</ul>\n","source":"_posts/this-site-s-recipe.md","raw":"title: \"this site's recipe\"\ndate: 2015-04-13 12:48:32\ntags:\n---\n## このサイトの作り方\n手軽にブログサイトのようなものを作りたく、githubの機能と静的ページ出力のhexoというフリーソフトで作りました。\n1. linux環境を作る（私はwindows7+vagrant+virtualboxで作りました)\n1. node.js(nvm)をインストールする\n    * 参考 http://liginc.co.jp/web/programming/server/104594\n1. hexoをインストールしてブログを作る\n    * デザインをいじるためtheme(casper)を追加でインストールしました\n1. github pages機能を使うためhrix.github.ioというリポジトリを作る\n1. 上記リポジトリをlinux環境にclone\n1. hexoでできたファイルを全部cloneしたディレクトリに移し、リポジトリに追加\n1. _config.ymlを編集して調整しhexoを立ち上げる。(hexo server)\n1. ローカル環境でmdファイルをプレビューしながら編集（utf8で保存すること）\n1. 静的ページ(html)発行（hexo generate）\n    * theme以下のcssを直した場合、一度全部消して（hexo clean）からgenerateしないとcssの変更は反映されないようです\n1. ソースのmdも含めてgithubにpush\n    * https://github.com/hrix/hrix.github.io　がリポジトリになります。\n    * hexoで静的ページだけをデプロイする仕組みもあるようですが、全部一つのリポジトリに入れることにしました。\nそのため、http://hrix.github.io/public/　がトップページになりますが、今回は気にしません。\n\n### 感想\n* hexo便利\n    * シンプルで動作が軽快なので楽しい\n    * 設定ファイル（_config.yml）分かりやすい\n* github, mdファイルを使えることは必要\n* でも全部で無料できる。\n","slug":"this-site-s-recipe","updated":1428906027543,"excerpt":"","_id":"p5c3iszncyx22pkw","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"最近のインフラエンジニアの仕事","date":1428821925000,"tags":[],"content":"<p>自社プロダクト部の平井です。部では二名いるインフラ担当の一人です</p>\n<p>インフラ担当って何をやっているのか？　少し分かりにくいのと、新しいことも取り入れながらやっていっていますので、仕事のご紹介したいと思います。</p>\n<h2 id=\"インフラエンジニアとは？\">インフラエンジニアとは？</h2>\n<p>仕事として分けると大きく二つ、</p>\n<ul>\n<li>サーバ構築</li>\n<li>日々の運用<br>があります。<br>前者は、インフラ設計、新しいサーバの立ち上げ、後者は、稼働中のサーバの監視、メンテナンス、トラブル対応、セキュリティ対策になります</li>\n</ul>\n<p>今までこれらを手を動かして作業している部分が大きかったのですが、少しづつプログラム開発のようなコード化を進めていっているのでそちらを紹介します。</p>\n<h2 id=\"インフラのコード化ついて\">インフラのコード化ついて</h2>\n<p>以前、もう一人のインフラ担当が以下のような事例紹介を発表しました。</p>\n<blockquote>\n<p>インフラ構築の自動化・量産化。e-Agencyのクラウドプロダクト部における Chef 導入事例を紹介<br><a href=\"http://www.e-agency.co.jp/column/20140724.html\" target=\"_blank\" rel=\"external\">http://www.e-agency.co.jp/column/20140724.html</a>  </p>\n</blockquote>\n<p>どれくらい大変なのか、その後どのように実践していったか、途中経過をお知らせします。</p>\n<h3 id=\"コード化の実践状況\">コード化の実践状況</h3>\n<p> 以前の手作業と、コード化作業との比較ですが、以下のような特徴があり、インフラチームのエンジニアと情報共有がグンと進んで来ているのを実感できています。</p>\n<ul>\n<li>一度作った手順（レシピ）をリポジトリ（Githubなど）に置いて再利用ができる</li>\n<li>どういう設定をしたか、いちいちサーバに入って確認しなくてよい（記憶に頼らなくてよい、メモの漏れも気にしなくて良い）といったメリットがあります。反面</li>\n<li>レシピを書かないといけないので、最初は手で立ち上げるよりかは時間がかかる。</li>\n</ul>\n<h3 id=\"サーバ構築\">サーバ構築</h3>\n<p>新規でサーバを立ち上げる場合は原則、Chefで構築したものを投入するようにしています。<br>具体的には主にミドルウエア（Apache, Nginx, MySQL, Ruby, PHPなど）のインストールを今まで手作業でやっていたものをChefに置き換えています。  </p>\n<h3 id=\"日々の運用\">日々の運用</h3>\n<p>監視部分はNagios, Muninといったツールをカスタマイズして使っています。これらの設定ファイルはGithubで履歴管理をしています。<br>不定期のメンテナンスでログインする場合、サーバ台数が100台以上になってきて、こちらも手作業が辛くなってきているので、ansibleというツールを使っています。こちらも手順がコード化できます。<br>ansibleはchefとかぶるツールではあるのですが、Chefと違って手作業でインストールしたサーバに対しても簡単に適用できるということで、全てのサーバに対してやる作業に使っています。</p>\n<p>Chefはきちんと整理して共有しやすくしてくれるツール。ansibleは運用を楽にしてくれるツールという使い分けになります。<br>しかし手でも同じことをやった経験があった方が、これらのツールになじみやすいと思います。</p>\n<h3 id=\"その他\">その他</h3>\n<ul>\n<li>SSL証明書の運用<br>暗号化と身元確認をまとめてやってしまっているもの。事務手続きもあるしちょっと特殊な扱いになります。</li>\n<li>その他<br>トラブル対応やセキュリティ対策、インフラのテストもこれから改善していきたい課題になります。</li>\n</ul>\n<h3 id=\"サーバ構築コード化の課題\">サーバ構築コード化の課題</h3>\n<p>　設計に関して、我々はサーバベンダーの選定はどこかに固定はしていません。固定するとコード化はしやすくなりますが、それよりもサーバの種類によってベンダーも使い分け（コーヒーで言うとブレンド）のメリットを感じています。運用中のアプリの造りも疎結合だったりします。</p>\n<ul>\n<li>オンプレミス（ラック借り）→最近はなくなりつつあります</li>\n<li>専用サーバ→クリティカルなもの、特殊な設定が必要なもの</li>\n<li>VPS→テスト、監視用サーバなどクリティカルではないもの（安く済ませられるというメリット）</li>\n<li>クラウド→これがメインになりつつあります</li>\n<li>その他Webサービス（AWSのS3など）<ul>\n<li>DNSのレコード管理のコード化はAWSのRoute53を使えば、比較的簡単にできるのでそろそろやりたいところです。</li>\n</ul>\n</li>\n</ul>\n<p>といった感じでサーバの役割に応じて使い分けています。<br>なので、サーバの起動、OSインストール、ネットワークの設定をどうしていくかは、これから考えていかなければいけない課題です。</p>\n<h3 id=\"まとめ\">まとめ</h3>\n<p>　インフラ業務をプログラムと同じように全てコード化できると、開発と運用がより近づき、今までよりレベルの上がった世界にいけると感じています。<br>インフラチームも開発と一緒になって生産性を上げて何かを成し遂げていきましょう。</p>\n","source":"_posts/about-infrastructure-engineering.md","raw":"title: 最近のインフラエンジニアの仕事\ndate: 2015-04-12 15:58:45\ntags:\n---\n\n自社プロダクト部の平井です。部では二名いるインフラ担当の一人です\n\nインフラ担当って何をやっているのか？　少し分かりにくいのと、新しいことも取り入れながらやっていっていますので、仕事のご紹介したいと思います。\n\n\n## インフラエンジニアとは？\n仕事として分けると大きく二つ、\n* サーバ構築\n* 日々の運用\nがあります。\n前者は、インフラ設計、新しいサーバの立ち上げ、後者は、稼働中のサーバの監視、メンテナンス、トラブル対応、セキュリティ対策になります\n\n今までこれらを手を動かして作業している部分が大きかったのですが、少しづつプログラム開発のようなコード化を進めていっているのでそちらを紹介します。\n\n## インフラのコード化ついて\n以前、もう一人のインフラ担当が以下のような事例紹介を発表しました。\n> インフラ構築の自動化・量産化。e-Agencyのクラウドプロダクト部における Chef 導入事例を紹介  \n> http://www.e-agency.co.jp/column/20140724.html  \n\nどれくらい大変なのか、その後どのように実践していったか、途中経過をお知らせします。\n\n### コード化の実践状況\n\n 以前の手作業と、コード化作業との比較ですが、以下のような特徴があり、インフラチームのエンジニアと情報共有がグンと進んで来ているのを実感できています。\n\n* 一度作った手順（レシピ）をリポジトリ（Githubなど）に置いて再利用ができる\n* どういう設定をしたか、いちいちサーバに入って確認しなくてよい（記憶に頼らなくてよい、メモの漏れも気にしなくて良い）といったメリットがあります。反面\n* レシピを書かないといけないので、最初は手で立ち上げるよりかは時間がかかる。\n\n### サーバ構築\n新規でサーバを立ち上げる場合は原則、Chefで構築したものを投入するようにしています。\n具体的には主にミドルウエア（Apache, Nginx, MySQL, Ruby, PHPなど）のインストールを今まで手作業でやっていたものをChefに置き換えています。  \n\n### 日々の運用\n監視部分はNagios, Muninといったツールをカスタマイズして使っています。これらの設定ファイルはGithubで履歴管理をしています。  \n不定期のメンテナンスでログインする場合、サーバ台数が100台以上になってきて、こちらも手作業が辛くなってきているので、ansibleというツールを使っています。こちらも手順がコード化できます。  \nansibleはchefとかぶるツールではあるのですが、Chefと違って手作業でインストールしたサーバに対しても簡単に適用できるということで、全てのサーバに対してやる作業に使っています。\n\nChefはきちんと整理して共有しやすくしてくれるツール。ansibleは運用を楽にしてくれるツールという使い分けになります。\nしかし手でも同じことをやった経験があった方が、これらのツールになじみやすいと思います。\n\n### その他\n* SSL証明書の運用\n暗号化と身元確認をまとめてやってしまっているもの。事務手続きもあるしちょっと特殊な扱いになります。\n* その他\nトラブル対応やセキュリティ対策、インフラのテストもこれから改善していきたい課題になります。\n\n### サーバ構築コード化の課題\n\n　設計に関して、我々はサーバベンダーの選定はどこかに固定はしていません。固定するとコード化はしやすくなりますが、それよりもサーバの種類によってベンダーも使い分け（コーヒーで言うとブレンド）のメリットを感じています。運用中のアプリの造りも疎結合だったりします。\n* オンプレミス（ラック借り）→最近はなくなりつつあります\n* 専用サーバ→クリティカルなもの、特殊な設定が必要なもの\n* VPS→テスト、監視用サーバなどクリティカルではないもの（安く済ませられるというメリット）\n* クラウド→これがメインになりつつあります\n* その他Webサービス（AWSのS3など）\n    * DNSのレコード管理のコード化はAWSのRoute53を使えば、比較的簡単にできるのでそろそろやりたいところです。\n\nといった感じでサーバの役割に応じて使い分けています。\nなので、サーバの起動、OSインストール、ネットワークの設定をどうしていくかは、これから考えていかなければいけない課題です。\n\n\n### まとめ\n　インフラ業務をプログラムと同じように全てコード化できると、開発と運用がより近づき、今までよりレベルの上がった世界にいけると感じています。\nインフラチームも開発と一緒になって生産性を上げて何かを成し遂げていきましょう。\n","slug":"about-infrastructure-engineering","updated":1428906003323,"excerpt":"","_id":"5f7v5datb0o964g8","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"heartbeatなどでどのサーバにVIPがあるかチェックするnagiosプラグインを公開しました","date":1425376842000,"tags":[],"content":"<p><a href=\"https://github.com/hrix/nagios-check_vip\" target=\"_blank\" rel=\"external\">https://github.com/hrix/nagios-check_vip</a></p>\n","source":"_posts/heartbeatなどでどのサーバにVIPがあるかチェックするnagiosプラグインを公開しました.md","raw":"title: heartbeatなどでどのサーバにVIPがあるかチェックするnagiosプラグインを公開しました\ndate: 2015-03-03 19:00:42\ntags:\n---\nhttps://github.com/hrix/nagios-check_vip\n","slug":"heartbeatなどでどのサーバにVIPがあるかチェックするnagiosプラグインを公開しました","updated":1425434509881,"excerpt":"","_id":"rnghy1f9e43n52ja","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"SSLの脆弱性FREAK最低限の確認","date":1425518309000,"tags":[],"content":"<p>SSLの深刻な脆弱性「FREAK」というのが話題になっています。<br>対策できていない場合、SSL通信が乗っ取られる危険があるので関係するWebサーバはチェックしておくとよいです。</p>\n<p>これのチェック方法・対応ですが<br>CentOS6/Apacheの組み合わせであれば、以下のような対策が考えられます。</p>\n<h3 id=\"①適当なサーバから問題の暗号形式になっていないかチェック\">①適当なサーバから問題の暗号形式になっていないかチェック</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"tag\">openssl</span> <span class=\"tag\">s_client</span> <span class=\"tag\">-connect</span> <span class=\"attr_selector\">[対象のドメイン]</span><span class=\"pseudo\">:443</span> <span class=\"tag\">-cipher</span> <span class=\"tag\">EXPORT</span></div></pre></td></tr></table></figure>\n\n<p>※結果</p>\n<blockquote>\n<p>handshake failureとでて15行ぐらいで終わったら問題なし、<br>そうではなく、たくさん暗号が出て<br>Server Temp Key: RSA, 512 bits<br>など出たら、問題ありです。<br>※Apacheの場合ssl.conf（CentOS6）ではデフォルト<br>SSLCipherSuite ALL:!ADH:!EXPORT:!SSLv2:RC4+RSA:+HIGH:+MEDIUM:+LOW<br>となってあってこれが効いていれば問題なしですが、<br>設定の仕方によって無効になってしまっている場合もあるので<br>SSLCipherSuiteを有効になるよう調整するなど確認が必要です。</p>\n</blockquote>\n<h3 id=\"②（CentOS6/7）2015/1/21にopensslのモジュールアップデートが出ているのでアップデートする\">②（CentOS6/7）2015/1/21にopensslのモジュールアップデートが出ているのでアップデートする</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\"># yum update openssl</span></div></pre></td></tr></table></figure>\n\n<ul>\n<li>①が問題なければ②はそれほど急がなくてもよいかと。</li>\n<li>以下がまとまっていて分かりやすいかと思いました。<br><a href=\"http://d.hatena.ne.jp/Kango/20150304/1425448983\" target=\"_blank\" rel=\"external\">http://d.hatena.ne.jp/Kango/20150304/1425448983</a></li>\n</ul>\n","source":"_posts/SSLの脆弱性FREAK最低限の確認.md","raw":"title: SSLの脆弱性FREAK最低限の確認\ndate: 2015-03-05 10:18:29\ntags:\n---\nSSLの深刻な脆弱性「FREAK」というのが話題になっています。\n対策できていない場合、SSL通信が乗っ取られる危険があるので関係するWebサーバはチェックしておくとよいです。\n\nこれのチェック方法・対応ですが\nCentOS6/Apacheの組み合わせであれば、以下のような対策が考えられます。\n\n### ①適当なサーバから問題の暗号形式になっていないかチェック\n\n```\n$ openssl s_client -connect [対象のドメイン]:443 -cipher EXPORT\n```\n※結果\n> handshake failureとでて15行ぐらいで終わったら問題なし、\nそうではなく、たくさん暗号が出て\n> Server Temp Key: RSA, 512 bits\nなど出たら、問題ありです。\n※Apacheの場合ssl.conf（CentOS6）ではデフォルト\n> SSLCipherSuite ALL:!ADH:!EXPORT:!SSLv2:RC4+RSA:+HIGH:+MEDIUM:+LOW\nとなってあってこれが効いていれば問題なしですが、\n設定の仕方によって無効になってしまっている場合もあるので\nSSLCipherSuiteを有効になるよう調整するなど確認が必要です。\n\n\n### ②（CentOS6/7）2015/1/21にopensslのモジュールアップデートが出ているのでアップデートする\n\n```\n# yum update openssl\n```\n\n* ①が問題なければ②はそれほど急がなくてもよいかと。\n* 以下がまとまっていて分かりやすいかと思いました。\nhttp://d.hatena.ne.jp/Kango/20150304/1425448983\n","slug":"SSLの脆弱性FREAK最低限の確認","updated":1425604973602,"excerpt":"","_id":"y3xbgo0ad9gyxh2d","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"History","date":1428856899000,"tags":[],"content":"<h2 id=\"インターネット前\">インターネット前</h2>\n<ul>\n<li>1991年、音楽を作りたくてMacintosh購入。※初めての自分のパソコン</li>\n<li>1993年、ダイヤルQ2のシステム、ハードメンテ、オペレーション担当※PCのハードウエア学ぶ</li>\n<li>1995年、転職してVBのプログラム習得（２６歳、遅咲きですね）</li>\n<li>1998年、横浜の外資系CD通販のインターネットベンチャーからWeb業界に。いろいろ身に付いた。<h2 id=\"Web時代\">Web時代</h2>\n</li>\n<li>1999年　神保町のインターネット会社で働き始める。</li>\n<li>2000年　学校向けASP開発(IIS, VB, SQLServer)</li>\n<li>2001年　のべ40大学導入！（2～5百万/月が５年以上！　営業の人のおかげ）</li>\n<li>2005年　退社</li>\n<li>2006～2008年　辛酸<br>プログラムはあまり書かず（ネットワーク、サーバ管理、外注管理など）</li>\n<li>2008年　横浜から京都に引っ越し株式会社イー・エージェンシー入社。</li>\n<li>2009年　グループ会社の株式会社コンフォート・マーケティングに転籍</li>\n<li>2011年　株式会社イー・エージェンシーに転籍<br>いろいろ勉強し直し、インフラエンジニア的な仕事に落ち着く</li>\n</ul>\n","source":"_posts/history.md","raw":"title: History\ndate: 2015-04-13 01:41:39\ntags:\n---\n## インターネット前\n* 1991年、音楽を作りたくてMacintosh購入。※初めての自分のパソコン\n* 1993年、ダイヤルQ2のシステム、ハードメンテ、オペレーション担当※PCのハードウエア学ぶ\n* 1995年、転職してVBのプログラム習得（２６歳、遅咲きですね）\n* 1998年、横浜の外資系CD通販のインターネットベンチャーからWeb業界に。いろいろ身に付いた。\n## Web時代\n* 1999年　神保町のインターネット会社で働き始める。\n* 2000年　学校向けASP開発(IIS, VB, SQLServer)\n* 2001年　のべ40大学導入！（2～5百万/月が５年以上！　営業の人のおかげ）\n* 2005年　退社\n* 2006～2008年　辛酸\nプログラムはあまり書かず（ネットワーク、サーバ管理、外注管理など）\n* 2008年　横浜から京都に引っ越し株式会社イー・エージェンシー入社。\n* 2009年　グループ会社の株式会社コンフォート・マーケティングに転籍\n* 2011年　株式会社イー・エージェンシーに転籍\nいろいろ勉強し直し、インフラエンジニア的な仕事に落ち着く\n","slug":"history","updated":1428906009086,"excerpt":"","_id":"wuaw8c962fof4dtt","categories":[],"comments":true,"layout":"post","photos":[],"link":""}],"Tag":[]}